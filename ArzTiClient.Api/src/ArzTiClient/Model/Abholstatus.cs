/*
 * Webservice ArzTI API
 *
 * Kommunikation des Webservers mit den jeweiligen Rechenzentren V.2021-05-20 
 *
 * The version of the OpenAPI document: V1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArzTiClient.Client.OpenAPIDateConverter;

namespace ArzTiClient.Model
{
    /// <summary>
    /// Abholstatus
    /// </summary>
    [DataContract]
    public partial class Abholstatus :  IEquatable<Abholstatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Abholstatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Abholstatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Abholstatus" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="uid">uid.</param>
        /// <param name="abgeholt">abgeholt (required).</param>
        public Abholstatus(RezeptId id = default(RezeptId), RezeptUId uid = default(RezeptUId), bool abgeholt = default(bool))
        {
            // to ensure "abgeholt" is required (not null)
            if (abgeholt == null)
            {
                throw new InvalidDataException("abgeholt is a required property for Abholstatus and cannot be null");
            }
            else
            {
                this.Abgeholt = abgeholt;
            }

            this.Id = id;
            this.Uid = uid;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public RezeptId Id { get; set; }

        /// <summary>
        /// Gets or Sets Uid
        /// </summary>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public RezeptUId Uid { get; set; }

        /// <summary>
        /// Gets or Sets Abgeholt
        /// </summary>
        [DataMember(Name="abgeholt", EmitDefaultValue=true)]
        public bool Abgeholt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Abholstatus {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Abgeholt: ").Append(Abgeholt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Abholstatus);
        }

        /// <summary>
        /// Returns true if Abholstatus instances are equal
        /// </summary>
        /// <param name="input">Instance of Abholstatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Abholstatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Uid == input.Uid ||
                    (this.Uid != null &&
                    this.Uid.Equals(input.Uid))
                ) && 
                (
                    this.Abgeholt == input.Abgeholt ||
                    (this.Abgeholt != null &&
                    this.Abgeholt.Equals(input.Abgeholt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Uid != null)
                    hashCode = hashCode * 59 + this.Uid.GetHashCode();
                if (this.Abgeholt != null)
                    hashCode = hashCode * 59 + this.Abgeholt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
