/*
 * Webservice ArzTI API
 *
 * Kommunikation des Webservers mit den jeweiligen Rechenzentren V.2021-05-20 
 *
 * The version of the OpenAPI document: V1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using ArzTiClient.Client;
using ArzTiClient.Model;

namespace ArzTiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRezeptUIDApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// l�scht ein Rezept
        /// </summary>
        /// <remarks>
        /// deleteRezeptUId
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <returns>Rezept</returns>
        Rezept DeleteRezeptUId (string ruid);

        /// <summary>
        /// l�scht ein Rezept
        /// </summary>
        /// <remarks>
        /// deleteRezeptUId
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <returns>ApiResponse of Rezept</returns>
        ApiResponse<Rezept> DeleteRezeptUIdWithHttpInfo (string ruid);
        /// <summary>
        /// liefert ein Rezept
        /// </summary>
        /// <remarks>
        /// getRezeptUId
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <returns>Rezept</returns>
        Rezept GetRezeptUId (string ruid);

        /// <summary>
        /// liefert ein Rezept
        /// </summary>
        /// <remarks>
        /// getRezeptUId
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <returns>ApiResponse of Rezept</returns>
        ApiResponse<Rezept> GetRezeptUIdWithHttpInfo (string ruid);
        /// <summary>
        /// liefert den Status eines Rezepts
        /// </summary>
        /// <remarks>
        /// getRezeptUIdStatus
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <returns>RezeptStatus</returns>
        RezeptStatus GetRezeptUIdStatus (string ruid);

        /// <summary>
        /// liefert den Status eines Rezepts
        /// </summary>
        /// <remarks>
        /// getRezeptUIdStatus
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <returns>ApiResponse of RezeptStatus</returns>
        ApiResponse<RezeptStatus> GetRezeptUIdStatusWithHttpInfo (string ruid);
        /// <summary>
        /// Status�nderung eines Rezeptes
        /// </summary>
        /// <remarks>
        /// patchRezeptUIdStatus
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <param name="status">Status value</param>
        /// <returns>RezeptStatus</returns>
        RezeptStatus PatchRezeptUIdStatus (string ruid, string status);

        /// <summary>
        /// Status�nderung eines Rezeptes
        /// </summary>
        /// <remarks>
        /// patchRezeptUIdStatus
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <param name="status">Status value</param>
        /// <returns>ApiResponse of RezeptStatus</returns>
        ApiResponse<RezeptStatus> PatchRezeptUIdStatusWithHttpInfo (string ruid, string status);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// l�scht ein Rezept
        /// </summary>
        /// <remarks>
        /// deleteRezeptUId
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Rezept</returns>
        System.Threading.Tasks.Task<Rezept> DeleteRezeptUIdAsync (string ruid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// l�scht ein Rezept
        /// </summary>
        /// <remarks>
        /// deleteRezeptUId
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Rezept)</returns>
        System.Threading.Tasks.Task<ApiResponse<Rezept>> DeleteRezeptUIdWithHttpInfoAsync (string ruid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// liefert ein Rezept
        /// </summary>
        /// <remarks>
        /// getRezeptUId
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Rezept</returns>
        System.Threading.Tasks.Task<Rezept> GetRezeptUIdAsync (string ruid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// liefert ein Rezept
        /// </summary>
        /// <remarks>
        /// getRezeptUId
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Rezept)</returns>
        System.Threading.Tasks.Task<ApiResponse<Rezept>> GetRezeptUIdWithHttpInfoAsync (string ruid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// liefert den Status eines Rezepts
        /// </summary>
        /// <remarks>
        /// getRezeptUIdStatus
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RezeptStatus</returns>
        System.Threading.Tasks.Task<RezeptStatus> GetRezeptUIdStatusAsync (string ruid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// liefert den Status eines Rezepts
        /// </summary>
        /// <remarks>
        /// getRezeptUIdStatus
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RezeptStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<RezeptStatus>> GetRezeptUIdStatusWithHttpInfoAsync (string ruid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Status�nderung eines Rezeptes
        /// </summary>
        /// <remarks>
        /// patchRezeptUIdStatus
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <param name="status">Status value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RezeptStatus</returns>
        System.Threading.Tasks.Task<RezeptStatus> PatchRezeptUIdStatusAsync (string ruid, string status, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Status�nderung eines Rezeptes
        /// </summary>
        /// <remarks>
        /// patchRezeptUIdStatus
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <param name="status">Status value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RezeptStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<RezeptStatus>> PatchRezeptUIdStatusWithHttpInfoAsync (string ruid, string status, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RezeptUIDApi : IRezeptUIDApi
    {
        private ArzTiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RezeptUIDApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RezeptUIDApi(String basePath)
        {
            this.Configuration = new ArzTiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ArzTiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RezeptUIDApi"/> class
        /// </summary>
        /// <returns></returns>
        public RezeptUIDApi()
        {
            this.Configuration = ArzTiClient.Client.Configuration.Default;

            ExceptionFactory = ArzTiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RezeptUIDApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RezeptUIDApi(ArzTiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ArzTiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ArzTiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ArzTiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ArzTiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// l�scht ein Rezept deleteRezeptUId
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <returns>Rezept</returns>
        public Rezept DeleteRezeptUId (string ruid)
        {
             ApiResponse<Rezept> localVarResponse = DeleteRezeptUIdWithHttpInfo(ruid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// l�scht ein Rezept deleteRezeptUId
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <returns>ApiResponse of Rezept</returns>
        public ApiResponse<Rezept> DeleteRezeptUIdWithHttpInfo (string ruid)
        {
            // verify the required parameter 'ruid' is set
            if (ruid == null)
                throw new ApiException(400, "Missing required parameter 'ruid' when calling RezeptUIDApi->DeleteRezeptUId");

            var localVarPath = "/rezept/{ruid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ruid != null) localVarPathParams.Add("ruid", this.Configuration.ApiClient.ParameterToString(ruid)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRezeptUId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Rezept>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Rezept) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Rezept)));
        }

        /// <summary>
        /// l�scht ein Rezept deleteRezeptUId
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Rezept</returns>
        public async System.Threading.Tasks.Task<Rezept> DeleteRezeptUIdAsync (string ruid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Rezept> localVarResponse = await DeleteRezeptUIdWithHttpInfoAsync(ruid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// l�scht ein Rezept deleteRezeptUId
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Rezept)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Rezept>> DeleteRezeptUIdWithHttpInfoAsync (string ruid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ruid' is set
            if (ruid == null)
                throw new ApiException(400, "Missing required parameter 'ruid' when calling RezeptUIDApi->DeleteRezeptUId");

            var localVarPath = "/rezept/{ruid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ruid != null) localVarPathParams.Add("ruid", this.Configuration.ApiClient.ParameterToString(ruid)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRezeptUId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Rezept>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Rezept) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Rezept)));
        }

        /// <summary>
        /// liefert ein Rezept getRezeptUId
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <returns>Rezept</returns>
        public Rezept GetRezeptUId (string ruid)
        {
             ApiResponse<Rezept> localVarResponse = GetRezeptUIdWithHttpInfo(ruid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// liefert ein Rezept getRezeptUId
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <returns>ApiResponse of Rezept</returns>
        public ApiResponse<Rezept> GetRezeptUIdWithHttpInfo (string ruid)
        {
            // verify the required parameter 'ruid' is set
            if (ruid == null)
                throw new ApiException(400, "Missing required parameter 'ruid' when calling RezeptUIDApi->GetRezeptUId");

            var localVarPath = "/rezept/{ruid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ruid != null) localVarPathParams.Add("ruid", this.Configuration.ApiClient.ParameterToString(ruid)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRezeptUId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Rezept>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Rezept) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Rezept)));
        }

        /// <summary>
        /// liefert ein Rezept getRezeptUId
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Rezept</returns>
        public async System.Threading.Tasks.Task<Rezept> GetRezeptUIdAsync (string ruid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Rezept> localVarResponse = await GetRezeptUIdWithHttpInfoAsync(ruid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// liefert ein Rezept getRezeptUId
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Rezept)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Rezept>> GetRezeptUIdWithHttpInfoAsync (string ruid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ruid' is set
            if (ruid == null)
                throw new ApiException(400, "Missing required parameter 'ruid' when calling RezeptUIDApi->GetRezeptUId");

            var localVarPath = "/rezept/{ruid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ruid != null) localVarPathParams.Add("ruid", this.Configuration.ApiClient.ParameterToString(ruid)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRezeptUId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Rezept>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Rezept) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Rezept)));
        }

        /// <summary>
        /// liefert den Status eines Rezepts getRezeptUIdStatus
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <returns>RezeptStatus</returns>
        public RezeptStatus GetRezeptUIdStatus (string ruid)
        {
             ApiResponse<RezeptStatus> localVarResponse = GetRezeptUIdStatusWithHttpInfo(ruid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// liefert den Status eines Rezepts getRezeptUIdStatus
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <returns>ApiResponse of RezeptStatus</returns>
        public ApiResponse<RezeptStatus> GetRezeptUIdStatusWithHttpInfo (string ruid)
        {
            // verify the required parameter 'ruid' is set
            if (ruid == null)
                throw new ApiException(400, "Missing required parameter 'ruid' when calling RezeptUIDApi->GetRezeptUIdStatus");

            var localVarPath = "/rezept/{ruid}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ruid != null) localVarPathParams.Add("ruid", this.Configuration.ApiClient.ParameterToString(ruid)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRezeptUIdStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RezeptStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RezeptStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RezeptStatus)));
        }

        /// <summary>
        /// liefert den Status eines Rezepts getRezeptUIdStatus
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RezeptStatus</returns>
        public async System.Threading.Tasks.Task<RezeptStatus> GetRezeptUIdStatusAsync (string ruid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<RezeptStatus> localVarResponse = await GetRezeptUIdStatusWithHttpInfoAsync(ruid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// liefert den Status eines Rezepts getRezeptUIdStatus
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RezeptStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RezeptStatus>> GetRezeptUIdStatusWithHttpInfoAsync (string ruid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ruid' is set
            if (ruid == null)
                throw new ApiException(400, "Missing required parameter 'ruid' when calling RezeptUIDApi->GetRezeptUIdStatus");

            var localVarPath = "/rezept/{ruid}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ruid != null) localVarPathParams.Add("ruid", this.Configuration.ApiClient.ParameterToString(ruid)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRezeptUIdStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RezeptStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RezeptStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RezeptStatus)));
        }

        /// <summary>
        /// Status�nderung eines Rezeptes patchRezeptUIdStatus
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <param name="status">Status value</param>
        /// <returns>RezeptStatus</returns>
        public RezeptStatus PatchRezeptUIdStatus (string ruid, string status)
        {
             ApiResponse<RezeptStatus> localVarResponse = PatchRezeptUIdStatusWithHttpInfo(ruid, status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Status�nderung eines Rezeptes patchRezeptUIdStatus
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <param name="status">Status value</param>
        /// <returns>ApiResponse of RezeptStatus</returns>
        public ApiResponse<RezeptStatus> PatchRezeptUIdStatusWithHttpInfo (string ruid, string status)
        {
            // verify the required parameter 'ruid' is set
            if (ruid == null)
                throw new ApiException(400, "Missing required parameter 'ruid' when calling RezeptUIDApi->PatchRezeptUIdStatus");
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling RezeptUIDApi->PatchRezeptUIdStatus");

            var localVarPath = "/rezept/{ruid}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ruid != null) localVarPathParams.Add("ruid", this.Configuration.ApiClient.ParameterToString(ruid)); // path parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchRezeptUIdStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RezeptStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RezeptStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RezeptStatus)));
        }

        /// <summary>
        /// Status�nderung eines Rezeptes patchRezeptUIdStatus
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <param name="status">Status value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RezeptStatus</returns>
        public async System.Threading.Tasks.Task<RezeptStatus> PatchRezeptUIdStatusAsync (string ruid, string status, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<RezeptStatus> localVarResponse = await PatchRezeptUIdStatusWithHttpInfoAsync(ruid, status, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Status�nderung eines Rezeptes patchRezeptUIdStatus
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <param name="status">Status value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RezeptStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RezeptStatus>> PatchRezeptUIdStatusWithHttpInfoAsync (string ruid, string status, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ruid' is set
            if (ruid == null)
                throw new ApiException(400, "Missing required parameter 'ruid' when calling RezeptUIDApi->PatchRezeptUIdStatus");
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling RezeptUIDApi->PatchRezeptUIdStatus");

            var localVarPath = "/rezept/{ruid}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ruid != null) localVarPathParams.Add("ruid", this.Configuration.ApiClient.ParameterToString(ruid)); // path parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchRezeptUIdStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RezeptStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RezeptStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RezeptStatus)));
        }

    }
}
