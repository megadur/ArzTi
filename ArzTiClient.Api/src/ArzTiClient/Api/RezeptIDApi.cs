/*
 * Webservice ArzTI API
 *
 * Kommunikation des Webservers mit den jeweiligen Rechenzentren V.2021-05-20 
 *
 * The version of the OpenAPI document: V1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using ArzTiClient.Client;
using ArzTiClient.Model;

namespace ArzTiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRezeptIDApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// l�scht ein Rezept
        /// </summary>
        /// <remarks>
        /// deleteRezeptId
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die RezeptID.</param>
        /// <returns>Rezept</returns>
        Rezept DeleteRezeptId (string apoik, RezeptTyp reztyp, string rezid);

        /// <summary>
        /// l�scht ein Rezept
        /// </summary>
        /// <remarks>
        /// deleteRezeptId
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die RezeptID.</param>
        /// <returns>ApiResponse of Rezept</returns>
        ApiResponse<Rezept> DeleteRezeptIdWithHttpInfo (string apoik, RezeptTyp reztyp, string rezid);
        /// <summary>
        /// liefert ein Rezept
        /// </summary>
        /// <remarks>
        /// getRezeptId
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die RezeptID.</param>
        /// <returns>Rezept</returns>
        Rezept GetRezeptId (string apoik, RezeptTyp reztyp, string rezid);

        /// <summary>
        /// liefert ein Rezept
        /// </summary>
        /// <remarks>
        /// getRezeptId
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die RezeptID.</param>
        /// <returns>ApiResponse of Rezept</returns>
        ApiResponse<Rezept> GetRezeptIdWithHttpInfo (string apoik, RezeptTyp reztyp, string rezid);
        /// <summary>
        /// Statusabfrage eines Rezeptes
        /// </summary>
        /// <remarks>
        /// getRezeptIdStatus
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die Rezept-ID.</param>
        /// <returns>Rezept</returns>
        Rezept GetRezeptIdStatus (string apoik, RezeptTyp reztyp, string rezid);

        /// <summary>
        /// Statusabfrage eines Rezeptes
        /// </summary>
        /// <remarks>
        /// getRezeptIdStatus
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die Rezept-ID.</param>
        /// <returns>ApiResponse of Rezept</returns>
        ApiResponse<Rezept> GetRezeptIdStatusWithHttpInfo (string apoik, RezeptTyp reztyp, string rezid);
        /// <summary>
        /// Status�nderung eines Rezeptes
        /// </summary>
        /// <remarks>
        /// patchRezeptIdStatus
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die Rezept-ID.</param>
        /// <param name="status">Status value</param>
        /// <returns>RezeptStatus</returns>
        RezeptStatus PatchRezeptIdStatus (string apoik, RezeptTyp reztyp, string rezid, string status);

        /// <summary>
        /// Status�nderung eines Rezeptes
        /// </summary>
        /// <remarks>
        /// patchRezeptIdStatus
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die Rezept-ID.</param>
        /// <param name="status">Status value</param>
        /// <returns>ApiResponse of RezeptStatus</returns>
        ApiResponse<RezeptStatus> PatchRezeptIdStatusWithHttpInfo (string apoik, RezeptTyp reztyp, string rezid, string status);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// l�scht ein Rezept
        /// </summary>
        /// <remarks>
        /// deleteRezeptId
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die RezeptID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Rezept</returns>
        System.Threading.Tasks.Task<Rezept> DeleteRezeptIdAsync (string apoik, RezeptTyp reztyp, string rezid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// l�scht ein Rezept
        /// </summary>
        /// <remarks>
        /// deleteRezeptId
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die RezeptID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Rezept)</returns>
        System.Threading.Tasks.Task<ApiResponse<Rezept>> DeleteRezeptIdWithHttpInfoAsync (string apoik, RezeptTyp reztyp, string rezid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// liefert ein Rezept
        /// </summary>
        /// <remarks>
        /// getRezeptId
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die RezeptID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Rezept</returns>
        System.Threading.Tasks.Task<Rezept> GetRezeptIdAsync (string apoik, RezeptTyp reztyp, string rezid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// liefert ein Rezept
        /// </summary>
        /// <remarks>
        /// getRezeptId
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die RezeptID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Rezept)</returns>
        System.Threading.Tasks.Task<ApiResponse<Rezept>> GetRezeptIdWithHttpInfoAsync (string apoik, RezeptTyp reztyp, string rezid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Statusabfrage eines Rezeptes
        /// </summary>
        /// <remarks>
        /// getRezeptIdStatus
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die Rezept-ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Rezept</returns>
        System.Threading.Tasks.Task<Rezept> GetRezeptIdStatusAsync (string apoik, RezeptTyp reztyp, string rezid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Statusabfrage eines Rezeptes
        /// </summary>
        /// <remarks>
        /// getRezeptIdStatus
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die Rezept-ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Rezept)</returns>
        System.Threading.Tasks.Task<ApiResponse<Rezept>> GetRezeptIdStatusWithHttpInfoAsync (string apoik, RezeptTyp reztyp, string rezid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Status�nderung eines Rezeptes
        /// </summary>
        /// <remarks>
        /// patchRezeptIdStatus
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die Rezept-ID.</param>
        /// <param name="status">Status value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RezeptStatus</returns>
        System.Threading.Tasks.Task<RezeptStatus> PatchRezeptIdStatusAsync (string apoik, RezeptTyp reztyp, string rezid, string status, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Status�nderung eines Rezeptes
        /// </summary>
        /// <remarks>
        /// patchRezeptIdStatus
        /// </remarks>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die Rezept-ID.</param>
        /// <param name="status">Status value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RezeptStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<RezeptStatus>> PatchRezeptIdStatusWithHttpInfoAsync (string apoik, RezeptTyp reztyp, string rezid, string status, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RezeptIDApi : IRezeptIDApi
    {
        private ArzTiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RezeptIDApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RezeptIDApi(String basePath)
        {
            this.Configuration = new ArzTiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ArzTiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RezeptIDApi"/> class
        /// </summary>
        /// <returns></returns>
        public RezeptIDApi()
        {
            this.Configuration = ArzTiClient.Client.Configuration.Default;

            ExceptionFactory = ArzTiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RezeptIDApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RezeptIDApi(ArzTiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ArzTiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ArzTiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ArzTiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ArzTiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// l�scht ein Rezept deleteRezeptId
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die RezeptID.</param>
        /// <returns>Rezept</returns>
        public Rezept DeleteRezeptId (string apoik, RezeptTyp reztyp, string rezid)
        {
             ApiResponse<Rezept> localVarResponse = DeleteRezeptIdWithHttpInfo(apoik, reztyp, rezid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// l�scht ein Rezept deleteRezeptId
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die RezeptID.</param>
        /// <returns>ApiResponse of Rezept</returns>
        public ApiResponse<Rezept> DeleteRezeptIdWithHttpInfo (string apoik, RezeptTyp reztyp, string rezid)
        {
            // verify the required parameter 'apoik' is set
            if (apoik == null)
                throw new ApiException(400, "Missing required parameter 'apoik' when calling RezeptIDApi->DeleteRezeptId");
            // verify the required parameter 'reztyp' is set
            if (reztyp == null)
                throw new ApiException(400, "Missing required parameter 'reztyp' when calling RezeptIDApi->DeleteRezeptId");
            // verify the required parameter 'rezid' is set
            if (rezid == null)
                throw new ApiException(400, "Missing required parameter 'rezid' when calling RezeptIDApi->DeleteRezeptId");

            var localVarPath = "/apotheke/{apoik}/rezept/{reztyp}/{rezid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apoik != null) localVarPathParams.Add("apoik", this.Configuration.ApiClient.ParameterToString(apoik)); // path parameter
            if (reztyp != null) localVarPathParams.Add("reztyp", this.Configuration.ApiClient.ParameterToString(reztyp)); // path parameter
            if (rezid != null) localVarPathParams.Add("rezid", this.Configuration.ApiClient.ParameterToString(rezid)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRezeptId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Rezept>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Rezept) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Rezept)));
        }

        /// <summary>
        /// l�scht ein Rezept deleteRezeptId
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die RezeptID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Rezept</returns>
        public async System.Threading.Tasks.Task<Rezept> DeleteRezeptIdAsync (string apoik, RezeptTyp reztyp, string rezid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Rezept> localVarResponse = await DeleteRezeptIdWithHttpInfoAsync(apoik, reztyp, rezid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// l�scht ein Rezept deleteRezeptId
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die RezeptID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Rezept)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Rezept>> DeleteRezeptIdWithHttpInfoAsync (string apoik, RezeptTyp reztyp, string rezid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'apoik' is set
            if (apoik == null)
                throw new ApiException(400, "Missing required parameter 'apoik' when calling RezeptIDApi->DeleteRezeptId");
            // verify the required parameter 'reztyp' is set
            if (reztyp == null)
                throw new ApiException(400, "Missing required parameter 'reztyp' when calling RezeptIDApi->DeleteRezeptId");
            // verify the required parameter 'rezid' is set
            if (rezid == null)
                throw new ApiException(400, "Missing required parameter 'rezid' when calling RezeptIDApi->DeleteRezeptId");

            var localVarPath = "/apotheke/{apoik}/rezept/{reztyp}/{rezid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apoik != null) localVarPathParams.Add("apoik", this.Configuration.ApiClient.ParameterToString(apoik)); // path parameter
            if (reztyp != null) localVarPathParams.Add("reztyp", this.Configuration.ApiClient.ParameterToString(reztyp)); // path parameter
            if (rezid != null) localVarPathParams.Add("rezid", this.Configuration.ApiClient.ParameterToString(rezid)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRezeptId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Rezept>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Rezept) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Rezept)));
        }

        /// <summary>
        /// liefert ein Rezept getRezeptId
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die RezeptID.</param>
        /// <returns>Rezept</returns>
        public Rezept GetRezeptId (string apoik, RezeptTyp reztyp, string rezid)
        {
             ApiResponse<Rezept> localVarResponse = GetRezeptIdWithHttpInfo(apoik, reztyp, rezid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// liefert ein Rezept getRezeptId
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die RezeptID.</param>
        /// <returns>ApiResponse of Rezept</returns>
        public ApiResponse<Rezept> GetRezeptIdWithHttpInfo (string apoik, RezeptTyp reztyp, string rezid)
        {
            // verify the required parameter 'apoik' is set
            if (apoik == null)
                throw new ApiException(400, "Missing required parameter 'apoik' when calling RezeptIDApi->GetRezeptId");
            // verify the required parameter 'reztyp' is set
            if (reztyp == null)
                throw new ApiException(400, "Missing required parameter 'reztyp' when calling RezeptIDApi->GetRezeptId");
            // verify the required parameter 'rezid' is set
            if (rezid == null)
                throw new ApiException(400, "Missing required parameter 'rezid' when calling RezeptIDApi->GetRezeptId");

            var localVarPath = "/apotheke/{apoik}/rezept/{reztyp}/{rezid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apoik != null) localVarPathParams.Add("apoik", this.Configuration.ApiClient.ParameterToString(apoik)); // path parameter
            if (reztyp != null) localVarPathParams.Add("reztyp", this.Configuration.ApiClient.ParameterToString(reztyp)); // path parameter
            if (rezid != null) localVarPathParams.Add("rezid", this.Configuration.ApiClient.ParameterToString(rezid)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRezeptId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Rezept>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Rezept) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Rezept)));
        }

        /// <summary>
        /// liefert ein Rezept getRezeptId
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die RezeptID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Rezept</returns>
        public async System.Threading.Tasks.Task<Rezept> GetRezeptIdAsync (string apoik, RezeptTyp reztyp, string rezid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Rezept> localVarResponse = await GetRezeptIdWithHttpInfoAsync(apoik, reztyp, rezid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// liefert ein Rezept getRezeptId
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die RezeptID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Rezept)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Rezept>> GetRezeptIdWithHttpInfoAsync (string apoik, RezeptTyp reztyp, string rezid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'apoik' is set
            if (apoik == null)
                throw new ApiException(400, "Missing required parameter 'apoik' when calling RezeptIDApi->GetRezeptId");
            // verify the required parameter 'reztyp' is set
            if (reztyp == null)
                throw new ApiException(400, "Missing required parameter 'reztyp' when calling RezeptIDApi->GetRezeptId");
            // verify the required parameter 'rezid' is set
            if (rezid == null)
                throw new ApiException(400, "Missing required parameter 'rezid' when calling RezeptIDApi->GetRezeptId");

            var localVarPath = "/apotheke/{apoik}/rezept/{reztyp}/{rezid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apoik != null) localVarPathParams.Add("apoik", this.Configuration.ApiClient.ParameterToString(apoik)); // path parameter
            if (reztyp != null) localVarPathParams.Add("reztyp", this.Configuration.ApiClient.ParameterToString(reztyp)); // path parameter
            if (rezid != null) localVarPathParams.Add("rezid", this.Configuration.ApiClient.ParameterToString(rezid)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRezeptId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Rezept>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Rezept) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Rezept)));
        }

        /// <summary>
        /// Statusabfrage eines Rezeptes getRezeptIdStatus
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die Rezept-ID.</param>
        /// <returns>Rezept</returns>
        public Rezept GetRezeptIdStatus (string apoik, RezeptTyp reztyp, string rezid)
        {
             ApiResponse<Rezept> localVarResponse = GetRezeptIdStatusWithHttpInfo(apoik, reztyp, rezid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Statusabfrage eines Rezeptes getRezeptIdStatus
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die Rezept-ID.</param>
        /// <returns>ApiResponse of Rezept</returns>
        public ApiResponse<Rezept> GetRezeptIdStatusWithHttpInfo (string apoik, RezeptTyp reztyp, string rezid)
        {
            // verify the required parameter 'apoik' is set
            if (apoik == null)
                throw new ApiException(400, "Missing required parameter 'apoik' when calling RezeptIDApi->GetRezeptIdStatus");
            // verify the required parameter 'reztyp' is set
            if (reztyp == null)
                throw new ApiException(400, "Missing required parameter 'reztyp' when calling RezeptIDApi->GetRezeptIdStatus");
            // verify the required parameter 'rezid' is set
            if (rezid == null)
                throw new ApiException(400, "Missing required parameter 'rezid' when calling RezeptIDApi->GetRezeptIdStatus");

            var localVarPath = "/apotheke/{apoik}/rezept/{reztyp}/{rezid}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apoik != null) localVarPathParams.Add("apoik", this.Configuration.ApiClient.ParameterToString(apoik)); // path parameter
            if (reztyp != null) localVarPathParams.Add("reztyp", this.Configuration.ApiClient.ParameterToString(reztyp)); // path parameter
            if (rezid != null) localVarPathParams.Add("rezid", this.Configuration.ApiClient.ParameterToString(rezid)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRezeptIdStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Rezept>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Rezept) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Rezept)));
        }

        /// <summary>
        /// Statusabfrage eines Rezeptes getRezeptIdStatus
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die Rezept-ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Rezept</returns>
        public async System.Threading.Tasks.Task<Rezept> GetRezeptIdStatusAsync (string apoik, RezeptTyp reztyp, string rezid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Rezept> localVarResponse = await GetRezeptIdStatusWithHttpInfoAsync(apoik, reztyp, rezid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Statusabfrage eines Rezeptes getRezeptIdStatus
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die Rezept-ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Rezept)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Rezept>> GetRezeptIdStatusWithHttpInfoAsync (string apoik, RezeptTyp reztyp, string rezid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'apoik' is set
            if (apoik == null)
                throw new ApiException(400, "Missing required parameter 'apoik' when calling RezeptIDApi->GetRezeptIdStatus");
            // verify the required parameter 'reztyp' is set
            if (reztyp == null)
                throw new ApiException(400, "Missing required parameter 'reztyp' when calling RezeptIDApi->GetRezeptIdStatus");
            // verify the required parameter 'rezid' is set
            if (rezid == null)
                throw new ApiException(400, "Missing required parameter 'rezid' when calling RezeptIDApi->GetRezeptIdStatus");

            var localVarPath = "/apotheke/{apoik}/rezept/{reztyp}/{rezid}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apoik != null) localVarPathParams.Add("apoik", this.Configuration.ApiClient.ParameterToString(apoik)); // path parameter
            if (reztyp != null) localVarPathParams.Add("reztyp", this.Configuration.ApiClient.ParameterToString(reztyp)); // path parameter
            if (rezid != null) localVarPathParams.Add("rezid", this.Configuration.ApiClient.ParameterToString(rezid)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRezeptIdStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Rezept>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Rezept) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Rezept)));
        }

        /// <summary>
        /// Status�nderung eines Rezeptes patchRezeptIdStatus
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die Rezept-ID.</param>
        /// <param name="status">Status value</param>
        /// <returns>RezeptStatus</returns>
        public RezeptStatus PatchRezeptIdStatus (string apoik, RezeptTyp reztyp, string rezid, string status)
        {
             ApiResponse<RezeptStatus> localVarResponse = PatchRezeptIdStatusWithHttpInfo(apoik, reztyp, rezid, status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Status�nderung eines Rezeptes patchRezeptIdStatus
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die Rezept-ID.</param>
        /// <param name="status">Status value</param>
        /// <returns>ApiResponse of RezeptStatus</returns>
        public ApiResponse<RezeptStatus> PatchRezeptIdStatusWithHttpInfo (string apoik, RezeptTyp reztyp, string rezid, string status)
        {
            // verify the required parameter 'apoik' is set
            if (apoik == null)
                throw new ApiException(400, "Missing required parameter 'apoik' when calling RezeptIDApi->PatchRezeptIdStatus");
            // verify the required parameter 'reztyp' is set
            if (reztyp == null)
                throw new ApiException(400, "Missing required parameter 'reztyp' when calling RezeptIDApi->PatchRezeptIdStatus");
            // verify the required parameter 'rezid' is set
            if (rezid == null)
                throw new ApiException(400, "Missing required parameter 'rezid' when calling RezeptIDApi->PatchRezeptIdStatus");
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling RezeptIDApi->PatchRezeptIdStatus");

            var localVarPath = "/apotheke/{apoik}/rezept/{reztyp}/{rezid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apoik != null) localVarPathParams.Add("apoik", this.Configuration.ApiClient.ParameterToString(apoik)); // path parameter
            if (reztyp != null) localVarPathParams.Add("reztyp", this.Configuration.ApiClient.ParameterToString(reztyp)); // path parameter
            if (rezid != null) localVarPathParams.Add("rezid", this.Configuration.ApiClient.ParameterToString(rezid)); // path parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchRezeptIdStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RezeptStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RezeptStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RezeptStatus)));
        }

        /// <summary>
        /// Status�nderung eines Rezeptes patchRezeptIdStatus
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die Rezept-ID.</param>
        /// <param name="status">Status value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RezeptStatus</returns>
        public async System.Threading.Tasks.Task<RezeptStatus> PatchRezeptIdStatusAsync (string apoik, RezeptTyp reztyp, string rezid, string status, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<RezeptStatus> localVarResponse = await PatchRezeptIdStatusWithHttpInfoAsync(apoik, reztyp, rezid, status, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Status�nderung eines Rezeptes patchRezeptIdStatus
        /// </summary>
        /// <exception cref="ArzTiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die Rezept-ID.</param>
        /// <param name="status">Status value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RezeptStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RezeptStatus>> PatchRezeptIdStatusWithHttpInfoAsync (string apoik, RezeptTyp reztyp, string rezid, string status, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'apoik' is set
            if (apoik == null)
                throw new ApiException(400, "Missing required parameter 'apoik' when calling RezeptIDApi->PatchRezeptIdStatus");
            // verify the required parameter 'reztyp' is set
            if (reztyp == null)
                throw new ApiException(400, "Missing required parameter 'reztyp' when calling RezeptIDApi->PatchRezeptIdStatus");
            // verify the required parameter 'rezid' is set
            if (rezid == null)
                throw new ApiException(400, "Missing required parameter 'rezid' when calling RezeptIDApi->PatchRezeptIdStatus");
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling RezeptIDApi->PatchRezeptIdStatus");

            var localVarPath = "/apotheke/{apoik}/rezept/{reztyp}/{rezid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apoik != null) localVarPathParams.Add("apoik", this.Configuration.ApiClient.ParameterToString(apoik)); // path parameter
            if (reztyp != null) localVarPathParams.Add("reztyp", this.Configuration.ApiClient.ParameterToString(reztyp)); // path parameter
            if (rezid != null) localVarPathParams.Add("rezid", this.Configuration.ApiClient.ParameterToString(rezid)); // path parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchRezeptIdStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RezeptStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RezeptStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RezeptStatus)));
        }

    }
}
