// <auto-generated />
using System;
using ArzTiServer.Domain.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ArzTiServer.Migrations
{
    [DbContext(typeof(ArzDbContext))]
    partial class ArzDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "en_US.utf8")
                .HasAnnotation("ProductVersion", "5.0.6");

            modelBuilder.HasSequence("er_fiverx_schema_id_fiverx_schema_seq", "daten");

            modelBuilder.HasSequence("er_senderezepte_prezept_pwirk_id_senderezepte_prezept_pwirk_seq", "daten");

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErAbdaImport", b =>
                {
                    b.Property<int>("IdAbdaImport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_abda_import");

                    b.Property<string>("AbsenderKennung")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasColumnName("absender_kennung");

                    b.Property<short?>("AnzahlTeildateien")
                        .HasColumnType("INTEGER")
                        .HasColumnName("anzahl_teildateien");

                    b.Property<string>("Datei")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("datei");

                    b.Property<string>("DateiErweiterung")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("datei_erweiterung");

                    b.Property<int?>("DateiGroesse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("datei_groesse")
                        .HasDefaultValueSql("0");

                    b.Property<string>("DateiType")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT")
                        .HasColumnName("datei_type")
                        .HasComment("L-löschen - N-neu");

                    b.Property<string>("Impkenner")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("impkenner")
                        .HasComment("Identifiziert DS die durch diese Datei eingefügt wurden");

                    b.Property<bool?>("Importiert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("importiert")
                        .HasDefaultValueSql("false");

                    b.Property<DateTime?>("ImportiertDatum")
                        .HasColumnType("date")
                        .HasColumnName("importiert_datum");

                    b.Property<int?>("ImportiertDsFehler")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("importiert_ds_fehler")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("ImportiertDsGesamt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("importiert_ds_gesamt");

                    b.Property<int?>("ImportiertDsImportiert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("importiert_ds_importiert")
                        .HasDefaultValueSql("0");

                    b.Property<short?>("ImportiertTeildatei")
                        .HasColumnType("INTEGER")
                        .HasColumnName("importiert_teildatei");

                    b.Property<TimeSpan?>("ImportiertZeit")
                        .HasColumnType("time without time zone")
                        .HasColumnName("importiert_zeit");

                    b.Property<bool?>("Konvertiert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("konvertiert")
                        .HasDefaultValueSql("false");

                    b.Property<DateTime?>("KonvertiertDatum")
                        .HasColumnType("date")
                        .HasColumnName("konvertiert_datum");

                    b.Property<int?>("KonvertiertDsFehler")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("konvertiert_ds_fehler")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("KonvertiertDsGesamt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("konvertiert_ds_gesamt");

                    b.Property<int?>("KonvertiertDsKonvertiert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("konvertiert_ds_konvertiert")
                        .HasDefaultValueSql("0");

                    b.Property<TimeSpan?>("KonvertiertZeit")
                        .HasColumnType("time without time zone")
                        .HasColumnName("konvertiert_zeit");

                    b.Property<string>("MandantKennung")
                        .HasMaxLength(4)
                        .HasColumnType("TEXT")
                        .HasColumnName("mandant_kennung");

                    b.Property<string>("MandantType")
                        .HasMaxLength(4)
                        .HasColumnType("TEXT")
                        .HasColumnName("mandant_type");

                    b.Property<int?>("Nummer")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nummer");

                    b.Property<string>("Schnittstelle")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT")
                        .HasColumnName("schnittstelle");

                    b.Property<string>("Uebertragungszaehler")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasColumnName("uebertragungszaehler");

                    b.Property<string>("Zeitstempel")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT")
                        .HasColumnName("zeitstempel");

                    b.Property<short?>("Zusatzdatei")
                        .HasColumnType("INTEGER")
                        .HasColumnName("zusatzdatei");

                    b.HasKey("IdAbdaImport")
                        .HasName("er_abda_import_pkey");

                    b.ToTable("er_abda_import", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErAbdaTemp", b =>
                {
                    b.Property<int>("IdAbda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_abda");

                    b.Property<short?>("Abgabeschluessel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("abgabeschluessel");

                    b.Property<short?>("Ampvamg")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ampvamg");

                    b.Property<short?>("Ampvsgb")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ampvsgb");

                    b.Property<int?>("Anbieter")
                        .HasColumnType("INTEGER")
                        .HasColumnName("anbieter");

                    b.Property<int?>("ApoEkPreis")
                        .HasColumnType("INTEGER")
                        .HasColumnName("apo_ek_preis");

                    b.Property<bool?>("ApoRabatt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("apo_rabatt");

                    b.Property<int?>("ApoVkOriginal")
                        .HasColumnType("INTEGER")
                        .HasColumnName("apo_vk_original");

                    b.Property<int?>("ApoVkPEmpf")
                        .HasColumnType("INTEGER")
                        .HasColumnName("apo_vk_p_empf");

                    b.Property<int?>("ApoVkPreis")
                        .HasColumnType("INTEGER")
                        .HasColumnName("apo_vk_preis");

                    b.Property<bool?>("Apothekenpflicht")
                        .HasColumnType("INTEGER")
                        .HasColumnName("apothekenpflicht");

                    b.Property<bool?>("AusErsetzung")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("aus_ersetzung")
                        .HasDefaultValueSql("false");

                    b.Property<bool?>("Betaeubungsmittel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("betaeubungsmittel");

                    b.Property<string>("Bezeichnung")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("bezeichnung");

                    b.Property<bool?>("Biotech")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("biotech")
                        .HasDefaultValueSql("false");

                    b.Property<short?>("CalcRabatt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("calc_rabatt");

                    b.Property<short?>("CheckPzn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("check_pzn");

                    b.Property<string>("Darreichungsform")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("darreichungsform");

                    b.Property<bool?>("EigenePzn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("eigene_pzn");

                    b.Property<bool?>("ErstFaehigFam")
                        .HasColumnType("INTEGER")
                        .HasColumnName("erst_faehig_fam");

                    b.Property<bool?>("Fertigarzneimittel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fertigarzneimittel");

                    b.Property<int?>("Festbetrag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("festbetrag");

                    b.Property<bool?>("GhRabatt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("gh_rabatt");

                    b.Property<int?>("GhRabattBetr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("gh_rabatt_betr");

                    b.Property<bool?>("GrNr01")
                        .HasColumnType("INTEGER")
                        .HasColumnName("gr_nr_01");

                    b.Property<DateTime?>("GueltigAb")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_ab");

                    b.Property<DateTime?>("GueltigBis")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_bis");

                    b.Property<bool?>("Hilfsmittel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hilfsmittel");

                    b.Property<bool?>("HimiZuVerb")
                        .HasColumnType("INTEGER")
                        .HasColumnName("himi_zu_verb");

                    b.Property<long?>("HmPositionsNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hm_positions_nr");

                    b.Property<bool?>("HsRabatt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hs_rabatt");

                    b.Property<int?>("HsRabattBetrag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hs_rabatt_betrag");

                    b.Property<int?>("HsVkPreis")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hs_vk_preis");

                    b.Property<bool?>("Impfstoff")
                        .HasColumnType("INTEGER")
                        .HasColumnName("impfstoff");

                    b.Property<bool?>("Import")
                        .HasColumnType("INTEGER")
                        .HasColumnName("import");

                    b.Property<bool?>("ImportMoeglich")
                        .HasColumnType("INTEGER")
                        .HasColumnName("import_moeglich");

                    b.Property<string>("Importkenner")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("importkenner");

                    b.Property<string>("IndikationsNr")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("indikations_nr");

                    b.Property<DateTime?>("Invalid")
                        .HasColumnType("date")
                        .HasColumnName("invalid");

                    b.Property<bool?>("KannHilfsmittel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("kann_hilfsmittel");

                    b.Property<bool?>("Klinikpackung")
                        .HasColumnType("INTEGER")
                        .HasColumnName("klinikpackung");

                    b.Property<short?>("LifeStyle")
                        .HasColumnType("INTEGER")
                        .HasColumnName("life_style");

                    b.Property<bool?>("Medizinprodukt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("medizinprodukt");

                    b.Property<string>("Menge")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("menge");

                    b.Property<string>("Mengeneinheit")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("mengeneinheit");

                    b.Property<short?>("MwstSatz")
                        .HasColumnType("INTEGER")
                        .HasColumnName("mwst_satz");

                    b.Property<short?>("Negativliste")
                        .HasColumnType("INTEGER")
                        .HasColumnName("negativliste");

                    b.Property<short?>("Normpackung")
                        .HasColumnType("INTEGER")
                        .HasColumnName("normpackung");

                    b.Property<short?>("Packungsgroesse")
                        .HasColumnType("INTEGER")
                        .HasColumnName("packungsgroesse");

                    b.Property<bool?>("PlusVArt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("plus_v_art");

                    b.Property<bool?>("Preiswert")
                        .HasColumnType("INTEGER")
                        .HasColumnName("preiswert");

                    b.Property<long?>("Pzn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pzn");

                    b.Property<long?>("PznOld")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pzn_old");

                    b.Property<long?>("PznOriginal")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pzn_original");

                    b.Property<bool?>("RabApo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rab_apo");

                    b.Property<bool?>("RabVertrag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rab_vertrag");

                    b.Property<int?>("RabWAnbieter")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rab_w_anbieter");

                    b.Property<int?>("RabWGenerika")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rab_w_generika");

                    b.Property<int?>("RabWImpfstof")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rab_w_impfstof");

                    b.Property<int?>("RabWPreisMor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rab_w_preis_mor");

                    b.Property<int?>("SteuerPzn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("steuer_pzn");

                    b.Property<bool?>("TierAm")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tier_am");

                    b.Property<int?>("VeMenge")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ve_menge");

                    b.Property<short?>("Verkehrsstatus")
                        .HasColumnType("INTEGER")
                        .HasColumnName("verkehrsstatus");

                    b.Property<short?>("Verschreibungspflicht")
                        .HasColumnType("INTEGER")
                        .HasColumnName("verschreibungspflicht");

                    b.Property<string>("Warengruppenschluessel")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("warengruppenschluessel");

                    b.Property<short?>("ZuzFreiFeb")
                        .HasColumnType("INTEGER")
                        .HasColumnName("zuz_frei_feb");

                    b.Property<short?>("ZuzFreiTstr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("zuz_frei_tstr");

                    b.Property<short?>("Zuzahlungskennzeichen")
                        .HasColumnType("INTEGER")
                        .HasColumnName("zuzahlungskennzeichen");

                    b.HasKey("IdAbda")
                        .HasName("er_abda_pkey");

                    b.ToTable("er_abda_temp", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErAbdaU", b =>
                {
                    b.Property<int>("IdAbdaUs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_abda_us")
                        .HasDefaultValueSql("nextval('daten.er_abda_us_temp_id_abda_us_seq'::regclass)");

                    b.Property<short?>("AusnahmeErsetzung")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ausnahme_ersetzung")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Bezeichnung")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("bezeichnung");

                    b.Property<string>("Darreichungsform")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("darreichungsform");

                    b.Property<DateTime?>("GueltigAb")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_ab");

                    b.Property<DateTime?>("GueltigBis")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_bis");

                    b.Property<int?>("ImportGruppeNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("import_gruppe_nr");

                    b.Property<int?>("KeyAus")
                        .HasColumnType("INTEGER")
                        .HasColumnName("key_aus");

                    b.Property<string>("Menge")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("menge");

                    b.Property<string>("Mengeneinheit")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("mengeneinheit");

                    b.Property<long?>("Pzn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pzn");

                    b.Property<string>("Warengruppe")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("warengruppe");

                    b.HasKey("IdAbdaUs")
                        .HasName("er_abda_us_pkey");

                    b.HasIndex(new[] { "Pzn", "GueltigAb", "GueltigBis" }, "idx_er_abda_us_pzn_gueltigabbis_20210401");

                    b.ToTable("er_abda_us", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErAbdaUsTemp", b =>
                {
                    b.Property<int>("IdAbdaUs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_abda_us")
                        .HasDefaultValueSql("nextval('daten.er_abda_us_temp_id_abda_us_seq1'::regclass)");

                    b.Property<short?>("AusnahmeErsetzung")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ausnahme_ersetzung")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Bezeichnung")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("bezeichnung");

                    b.Property<string>("Darreichungsform")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("darreichungsform");

                    b.Property<DateTime?>("GueltigAb")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_ab");

                    b.Property<DateTime?>("GueltigBis")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_bis");

                    b.Property<int?>("ImportGruppeNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("import_gruppe_nr");

                    b.Property<int?>("KeyAus")
                        .HasColumnType("INTEGER")
                        .HasColumnName("key_aus");

                    b.Property<string>("Menge")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("menge");

                    b.Property<string>("Mengeneinheit")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("mengeneinheit");

                    b.Property<long?>("Pzn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pzn");

                    b.Property<string>("Warengruppe")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("warengruppe");

                    b.HasKey("IdAbdaUs")
                        .HasName("er_abda_us_temp_pkey");

                    b.ToTable("er_abda_us_temp", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErAbdum", b =>
                {
                    b.Property<int>("IdAbda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_abda")
                        .HasDefaultValueSql("nextval('daten.er_abda_temp_id_abda_seq1'::regclass)");

                    b.Property<short?>("Abgabeschluessel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("abgabeschluessel");

                    b.Property<short?>("Ampvamg")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ampvamg");

                    b.Property<short?>("Ampvsgb")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ampvsgb");

                    b.Property<int?>("Anbieter")
                        .HasColumnType("INTEGER")
                        .HasColumnName("anbieter");

                    b.Property<int?>("ApoEkPreis")
                        .HasColumnType("INTEGER")
                        .HasColumnName("apo_ek_preis");

                    b.Property<bool?>("ApoRabatt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("apo_rabatt");

                    b.Property<int?>("ApoVkOriginal")
                        .HasColumnType("INTEGER")
                        .HasColumnName("apo_vk_original");

                    b.Property<int?>("ApoVkPEmpf")
                        .HasColumnType("INTEGER")
                        .HasColumnName("apo_vk_p_empf");

                    b.Property<int?>("ApoVkPreis")
                        .HasColumnType("INTEGER")
                        .HasColumnName("apo_vk_preis");

                    b.Property<bool?>("Apothekenpflicht")
                        .HasColumnType("INTEGER")
                        .HasColumnName("apothekenpflicht");

                    b.Property<bool?>("AusErsetzung")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("aus_ersetzung")
                        .HasDefaultValueSql("false");

                    b.Property<bool?>("Betaeubungsmittel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("betaeubungsmittel");

                    b.Property<string>("Bezeichnung")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("bezeichnung");

                    b.Property<bool?>("Biotech")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("biotech")
                        .HasDefaultValueSql("false");

                    b.Property<short?>("CalcRabatt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("calc_rabatt");

                    b.Property<short?>("CheckPzn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("check_pzn");

                    b.Property<string>("Darreichungsform")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("darreichungsform");

                    b.Property<bool?>("EigenePzn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("eigene_pzn");

                    b.Property<bool?>("ErstFaehigFam")
                        .HasColumnType("INTEGER")
                        .HasColumnName("erst_faehig_fam");

                    b.Property<bool?>("Fertigarzneimittel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fertigarzneimittel");

                    b.Property<int?>("Festbetrag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("festbetrag");

                    b.Property<bool?>("GhRabatt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("gh_rabatt");

                    b.Property<int?>("GhRabattBetr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("gh_rabatt_betr");

                    b.Property<bool?>("GrNr01")
                        .HasColumnType("INTEGER")
                        .HasColumnName("gr_nr_01");

                    b.Property<DateTime?>("GueltigAb")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_ab");

                    b.Property<DateTime?>("GueltigBis")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_bis");

                    b.Property<bool?>("Hilfsmittel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hilfsmittel");

                    b.Property<bool?>("HimiZuVerb")
                        .HasColumnType("INTEGER")
                        .HasColumnName("himi_zu_verb");

                    b.Property<long?>("HmPositionsNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hm_positions_nr");

                    b.Property<bool?>("HsRabatt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hs_rabatt");

                    b.Property<int?>("HsRabattBetrag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hs_rabatt_betrag");

                    b.Property<int?>("HsVkPreis")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hs_vk_preis");

                    b.Property<bool?>("Impfstoff")
                        .HasColumnType("INTEGER")
                        .HasColumnName("impfstoff");

                    b.Property<bool?>("Import")
                        .HasColumnType("INTEGER")
                        .HasColumnName("import");

                    b.Property<bool?>("ImportMoeglich")
                        .HasColumnType("INTEGER")
                        .HasColumnName("import_moeglich");

                    b.Property<string>("Importkenner")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("importkenner");

                    b.Property<string>("IndikationsNr")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("indikations_nr");

                    b.Property<DateTime?>("Invalid")
                        .HasColumnType("date")
                        .HasColumnName("invalid");

                    b.Property<bool?>("KannHilfsmittel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("kann_hilfsmittel");

                    b.Property<bool?>("Klinikpackung")
                        .HasColumnType("INTEGER")
                        .HasColumnName("klinikpackung");

                    b.Property<short?>("LifeStyle")
                        .HasColumnType("INTEGER")
                        .HasColumnName("life_style");

                    b.Property<bool?>("Medizinprodukt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("medizinprodukt");

                    b.Property<string>("Menge")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("menge");

                    b.Property<string>("Mengeneinheit")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("mengeneinheit");

                    b.Property<short?>("MwstSatz")
                        .HasColumnType("INTEGER")
                        .HasColumnName("mwst_satz");

                    b.Property<short?>("Negativliste")
                        .HasColumnType("INTEGER")
                        .HasColumnName("negativliste");

                    b.Property<short?>("Normpackung")
                        .HasColumnType("INTEGER")
                        .HasColumnName("normpackung");

                    b.Property<short?>("Packungsgroesse")
                        .HasColumnType("INTEGER")
                        .HasColumnName("packungsgroesse");

                    b.Property<bool?>("PlusVArt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("plus_v_art");

                    b.Property<bool?>("Preiswert")
                        .HasColumnType("INTEGER")
                        .HasColumnName("preiswert");

                    b.Property<long?>("Pzn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pzn");

                    b.Property<long?>("PznOld")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pzn_old");

                    b.Property<long?>("PznOriginal")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pzn_original");

                    b.Property<bool?>("RabApo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rab_apo");

                    b.Property<bool?>("RabVertrag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rab_vertrag");

                    b.Property<int?>("RabWAnbieter")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rab_w_anbieter");

                    b.Property<int?>("RabWGenerika")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rab_w_generika");

                    b.Property<int?>("RabWImpfstof")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rab_w_impfstof");

                    b.Property<int?>("RabWPreisMor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rab_w_preis_mor");

                    b.Property<int?>("SteuerPzn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("steuer_pzn");

                    b.Property<bool?>("TierAm")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tier_am");

                    b.Property<int?>("VeMenge")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ve_menge");

                    b.Property<short?>("Verkehrsstatus")
                        .HasColumnType("INTEGER")
                        .HasColumnName("verkehrsstatus");

                    b.Property<short?>("Verschreibungspflicht")
                        .HasColumnType("INTEGER")
                        .HasColumnName("verschreibungspflicht");

                    b.Property<string>("Warengruppenschluessel")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("warengruppenschluessel");

                    b.Property<short?>("ZuzFreiFeb")
                        .HasColumnType("INTEGER")
                        .HasColumnName("zuz_frei_feb");

                    b.Property<short?>("ZuzFreiTstr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("zuz_frei_tstr");

                    b.Property<short?>("Zuzahlungskennzeichen")
                        .HasColumnType("INTEGER")
                        .HasColumnName("zuzahlungskennzeichen");

                    b.HasKey("IdAbda")
                        .HasName("er_abda_temp_pkey");

                    b.HasIndex(new[] { "Pzn", "GueltigAb", "GueltigBis" }, "idx_er_abda_pzn_gueltigabbis_20210401");

                    b.ToTable("er_abda", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErApotheke", b =>
                {
                    b.Property<int>("IdApotheke")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_apotheke");

                    b.Property<DateTime?>("AenDatum")
                        .HasColumnType("date")
                        .HasColumnName("aen_datum");

                    b.Property<int?>("AenIdSecUser")
                        .HasColumnType("INTEGER")
                        .HasColumnName("aen_id_sec_user");

                    b.Property<TimeSpan?>("AenZeit")
                        .HasColumnType("time without time zone")
                        .HasColumnName("aen_zeit");

                    b.Property<long>("ApoIkNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("apo_ik_nr");

                    b.Property<int?>("ApoIntNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("apo_int_nr");

                    b.Property<string>("ApothekeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("apotheke_name");

                    b.Property<string>("ApothekeNameZusatz")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("apotheke_name_zusatz");

                    b.Property<string>("Bemerkung")
                        .HasColumnType("TEXT")
                        .HasColumnName("bemerkung");

                    b.Property<string>("Bundesland")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("bundesland");

                    b.Property<string>("Email")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("fax");

                    b.Property<short?>("Filialapotheke")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("filialapotheke")
                        .HasDefaultValueSql("0");

                    b.Property<bool?>("Gesperrt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("gesperrt")
                        .HasDefaultValueSql("false");

                    b.Property<long?>("IdHauptapotheke")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_hauptapotheke")
                        .HasDefaultValueSql("0")
                        .HasComment("ID der Hauptapotheke wenn dies eine Filialapotheke ist");

                    b.Property<short?>("IdHtAnrede")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_ht_anrede")
                        .HasDefaultValueSql("0");

                    b.Property<short?>("IdLeType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_le_type")
                        .HasDefaultValueSql("0");

                    b.Property<string>("InhaberNachname")
                        .HasMaxLength(65)
                        .HasColumnType("TEXT")
                        .HasColumnName("inhaber_nachname");

                    b.Property<string>("InhaberVorname")
                        .HasMaxLength(65)
                        .HasColumnType("TEXT")
                        .HasColumnName("inhaber_vorname");

                    b.Property<string>("MandantType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4)
                        .HasColumnType("TEXT")
                        .HasColumnName("mandant_type")
                        .HasDefaultValueSql("'APO'::character varying")
                        .HasComment("APO - Apotheke\nHRST - Hersteller (Dienstleister)");

                    b.Property<string>("Mobil")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("mobil");

                    b.Property<string>("Ort")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnName("ort");

                    b.Property<int?>("Plz")
                        .HasColumnType("INTEGER")
                        .HasColumnName("plz");

                    b.Property<int?>("SecLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("sec_login")
                        .HasDefaultValueSql("0")
                        .HasComment("Security-Login - 0-Keiner, 1-Feste-IP, 2-DynDNS URLs, ...");

                    b.Property<bool?>("SecLoginNurApoUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("sec_login_nur_apo_user")
                        .HasDefaultValueSql("false")
                        .HasComment("Seurity-Login nur für Apotheken-Benutzer - F-nein, T-ja");

                    b.Property<string>("SecLoginWerte")
                        .HasMaxLength(580)
                        .HasColumnType("TEXT")
                        .HasColumnName("sec_login_werte")
                        .HasComment("Werte zum Security-Login");

                    b.Property<string>("Strasse")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnName("strasse");

                    b.Property<string>("Telefon")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("telefon");

                    b.HasKey("IdApotheke")
                        .HasName("apotheke_pkey");

                    b.HasIndex(new[] { "ApoIkNr" }, "idx_er_apotheke_apo_ik_nr");

                    b.HasIndex(new[] { "ApoIntNr" }, "idx_er_apotheke_apo_int_nr");

                    b.ToTable("er_apotheke", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErFiverxVersion", b =>
                {
                    b.Property<int>("IdFiverxVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_fiverx_version");

                    b.Property<DateTime>("Ablaufdatum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("ablaufdatum")
                        .HasDefaultValueSql("'1000-01-01'::date")
                        .HasComment("grance Periode - Version wird unterstützt bis zu diesem Datum");

                    b.Property<string>("FiverxVersion")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT")
                        .HasColumnName("fiverx_version");

                    b.Property<string>("Schemadatei")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnName("schemadatei");

                    b.HasKey("IdFiverxVersion")
                        .HasName("er_fiverx_version_pkey");

                    b.ToTable("er_fiverx_version", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErPrueferezeptEmuster16", b =>
                {
                    b.Property<int>("IdPrueferezeptEmuster16")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_prueferezept_emuster16");

                    b.Property<string>("AbdaKassentyp")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("abda_kassentyp")
                        .HasComment("kArt");

                    b.Property<DateTime?>("Abgabedatum")
                        .HasColumnType("date")
                        .HasColumnName("abgabedatum")
                        .HasComment("abDatum");

                    b.Property<long?>("ApoIkNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("apo_ik_nr");

                    b.Property<string>("Arbeitsplatz")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("arbeitsplatz")
                        .HasComment("arbPlatz");

                    b.Property<long?>("ArztNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("arzt_nr")
                        .HasComment("laNr - Lebenslange Arzt-Nummer");

                    b.Property<string>("AvsId")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("avs_id");

                    b.Property<string>("Bediener")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("bediener");

                    b.Property<short?>("BegrPflicht")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("begr_pflicht")
                        .HasDefaultValueSql("0")
                        .HasComment("bgrPfl");

                    b.Property<long?>("BetriebsstaettenNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("betriebsstaetten_nr")
                        .HasComment("vrtrgsArztNr - Betriebsstättennummer oder Praxis-Nummer");

                    b.Property<decimal?>("Eigenanteil")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(11, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("eigenanteil")
                        .HasDefaultValueSql("0")
                        .HasComment("eigBet");

                    b.Property<decimal?>("GesamtesBrutto")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(11, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("gesamtes_brutto")
                        .HasDefaultValueSql("0");

                    b.Property<int>("IdPrueferezepteHeader")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_prueferezepte_header");

                    b.Property<long?>("KkIkNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("kk_ik_nr")
                        .HasComment("Krankenkassen-Ik der Versicherung");

                    b.Property<string>("KkName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("kk_name")
                        .HasComment("kName");

                    b.Property<string>("KkTyp")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("kk_typ")
                        .HasComment("rTyp");

                    b.Property<short?>("KzArbeitsunfall")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_arbeitsunfall")
                        .HasDefaultValueSql("0")
                        .HasComment("aUnfall");

                    b.Property<short?>("KzBvg")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_bvg")
                        .HasDefaultValueSql("0")
                        .HasComment("bvg");

                    b.Property<short?>("KzGebuehrenFrei")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_gebuehren_frei")
                        .HasDefaultValueSql("0")
                        .HasComment("gebFrei");

                    b.Property<short?>("KzHilfsmittel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_hilfsmittel")
                        .HasDefaultValueSql("0")
                        .HasComment("hilf");

                    b.Property<short?>("KzImpfstoff")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_impfstoff")
                        .HasDefaultValueSql("0")
                        .HasComment("impf");

                    b.Property<short?>("KzNoctu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_noctu")
                        .HasDefaultValueSql("0")
                        .HasComment("noctu");

                    b.Property<short?>("KzSonstige")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_sonstige")
                        .HasDefaultValueSql("0")
                        .HasComment("sonstige");

                    b.Property<short?>("KzSprechstundenbedarf")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_sprechstundenbedarf")
                        .HasDefaultValueSql("0")
                        .HasComment("sprStBedarf");

                    b.Property<short?>("KzUnfall")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_unfall")
                        .HasDefaultValueSql("0")
                        .HasComment("unfall");

                    b.Property<long?>("Muster16Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("muster16_id");

                    b.Property<string>("PruefModus")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("pruef_modus")
                        .HasComment("SYNCHRON oder ASYNCHRON");

                    b.Property<string>("RezeptTyp")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("rezept_typ")
                        .HasComment("Nur STANDARDREZEPT, BTM, SPRECHSTUNDENBEDARF");

                    b.Property<string>("RzDatum")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("rz_datum");

                    b.Property<DateTime?>("RzLieferDatum")
                        .HasColumnType("date")
                        .HasColumnName("rz_liefer_datum");

                    b.Property<string>("RzLieferId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("rz_liefer_id");

                    b.Property<TimeSpan?>("RzLieferZeit")
                        .HasColumnType("time without time zone")
                        .HasColumnName("rz_liefer_zeit");

                    b.Property<short?>("TFachinformation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("t_fachinformation")
                        .HasDefaultValueSql("0")
                        .HasComment("tFachinformation");

                    b.Property<short?>("TInLabel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("t_in_label")
                        .HasDefaultValueSql("0")
                        .HasComment("tInLabel");

                    b.Property<short?>("TOffLabel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("t_off_label")
                        .HasDefaultValueSql("0")
                        .HasComment("tOffLabel");

                    b.Property<short?>("TSicherheitsbestimmung")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("t_sicherheitsbestimmung")
                        .HasDefaultValueSql("0")
                        .HasComment("tSicherheitsbestimmung");

                    b.Property<DateTime?>("UnfallDatum")
                        .HasColumnType("date")
                        .HasColumnName("unfall_datum")
                        .HasComment("unfallTag");

                    b.Property<DateTime?>("Verordnungsdatum")
                        .HasColumnType("date")
                        .HasColumnName("verordnungsdatum")
                        .HasComment("verDat - Ausstellungsdatum - Verordnungsdatum");

                    b.Property<DateTime?>("VersichertenGeburtsdatum")
                        .HasColumnType("date")
                        .HasColumnName("versicherten_geburtsdatum")
                        .HasComment("vGeb");

                    b.Property<string>("VersichertenName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("versicherten_name")
                        .HasComment("vName");

                    b.Property<string>("VersichertenNummer")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("versicherten_nummer")
                        .HasComment("vrsNr");

                    b.Property<string>("VersichertenOrt")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("versicherten_ort")
                        .HasComment("vOrt");

                    b.Property<string>("VersichertenPlz")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("versicherten_plz")
                        .HasComment("vPlz");

                    b.Property<string>("VersichertenStatus")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("versicherten_status")
                        .HasComment("vStat");

                    b.Property<string>("VersichertenStrasse")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("versicherten_strasse")
                        .HasComment("vStr");

                    b.Property<string>("VersichertenTitel")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("versicherten_titel")
                        .HasComment("vTitel");

                    b.Property<string>("VersichertenVorname")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("versicherten_vorname")
                        .HasComment("vVorname");

                    b.Property<string>("VersichertenkarteGueltigBis")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("versichertenkarte_gueltig_bis")
                        .HasComment("vkGueltigBis");

                    b.Property<decimal?>("Zuzahlung")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(11, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("zuzahlung")
                        .HasDefaultValueSql("0");

                    b.HasKey("IdPrueferezeptEmuster16")
                        .HasName("er_prueferezept_emuster16_pkey");

                    b.ToTable("er_prueferezept_emuster16", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErPrueferezeptEmuster16Artikel", b =>
                {
                    b.Property<int>("IdPrueferezeptEmuster16Artikel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_prueferezept_emuster16_artikel")
                        .HasDefaultValueSql("nextval('daten.er_prueferezept_emuster16_art_id_prueferezept_emuster16_art_seq'::regclass)");

                    b.Property<short?>("ArtikelAutidem")
                        .HasColumnType("INTEGER")
                        .HasColumnName("artikel_autidem");

                    b.Property<int?>("ArtikelFaktor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("artikel_faktor");

                    b.Property<string>("ArtikelMediName")
                        .HasMaxLength(130)
                        .HasColumnType("TEXT")
                        .HasColumnName("artikel_medi_name");

                    b.Property<decimal?>("ArtikelTaxe")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(11, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("artikel_taxe")
                        .HasDefaultValueSql("0");

                    b.Property<long?>("ArzneiPzn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("arznei_pzn");

                    b.Property<short?>("AtrikelNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("atrikel_nr");

                    b.Property<long?>("HilfsmittelNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hilfsmittel_nr");

                    b.Property<int?>("IdPrueferezeptEmuster16")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_prueferezept_emuster16");

                    b.HasKey("IdPrueferezeptEmuster16Artikel")
                        .HasName("er_prueferezept_emuster16_artikel_pkey");

                    b.HasIndex("IdPrueferezeptEmuster16");

                    b.ToTable("er_prueferezept_emuster16_artikel", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErPrueferezeptEmuster16Status", b =>
                {
                    b.Property<int>("IdPrueferezeptEmuster16Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_prueferezept_emuster16_status")
                        .HasDefaultValueSql("nextval('daten.er_prueferezept_emuster16_sta_id_prueferezept_emuster16_sta_seq'::regclass)");

                    b.Property<int?>("IdPrueferezeptEmuster16")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_prueferezept_emuster16");

                    b.Property<long?>("Muster16Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("muster16_id");

                    b.Property<bool?>("RezeptCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("rezept_check")
                        .HasDefaultValueSql("false");

                    b.Property<string>("RezeptStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("rezept_status")
                        .HasDefaultValueSql("'VOR_PRUEFUNG'::character varying");

                    b.Property<DateTime?>("StatusAbfrageDatum")
                        .HasColumnType("date")
                        .HasColumnName("status_abfrage_datum")
                        .HasComment("Abfragedatum des Status zum Rezept");

                    b.Property<TimeSpan?>("StatusAbfrageZeit")
                        .HasColumnType("time without time zone")
                        .HasColumnName("status_abfrage_zeit")
                        .HasComment("Abfragezeit des Status zum Rezept");

                    b.HasKey("IdPrueferezeptEmuster16Status")
                        .HasName("er_prueferezept_emuster16_status_pkey");

                    b.HasIndex("IdPrueferezeptEmuster16");

                    b.ToTable("er_prueferezept_emuster16_status", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErPrueferezeptEmuster16Statusinfo", b =>
                {
                    b.Property<int>("IdPrueferezeptEmuster16Statusinfo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_prueferezept_emuster16_statusinfo")
                        .HasDefaultValueSql("nextval('daten.er_prueferezept_emuster16_sta_id_prueferezept_emuster16_st_seq1'::regclass)");

                    b.Property<string>("Fcode")
                        .HasMaxLength(4)
                        .HasColumnType("TEXT")
                        .HasColumnName("fcode");

                    b.Property<string>("Fkommentar")
                        .HasColumnType("TEXT")
                        .HasColumnName("fkommentar");

                    b.Property<string>("Fkurztext")
                        .HasColumnType("TEXT")
                        .HasColumnName("fkurztext");

                    b.Property<string>("Fstatus")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("fstatus");

                    b.Property<string>("Ftcode")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasColumnName("ftcode");

                    b.Property<int?>("IdPrueferezeptEmuster16")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_prueferezept_emuster16");

                    b.Property<short?>("Posnr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("posnr");

                    b.HasKey("IdPrueferezeptEmuster16Statusinfo")
                        .HasName("er_prueferezept_emuster16_statusinfo_pkey");

                    b.HasIndex("IdPrueferezeptEmuster16");

                    b.ToTable("er_prueferezept_emuster16_statusinfo", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErPrueferezeptErezept", b =>
                {
                    b.Property<int>("IdPrueferezeptErezept")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_prueferezept_erezept");

                    b.Property<string>("AvsId")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("avs_id");

                    b.Property<string>("ErezeptData")
                        .HasColumnType("TEXT")
                        .HasColumnName("erezept_data")
                        .HasComment("Base64 Codierung der eRezept Daten");

                    b.Property<string>("ErezeptId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("erezept_id");

                    b.Property<string>("PruefModus")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("pruef_modus");

                    b.Property<string>("RzDatum")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("rz_datum");

                    b.Property<DateTime?>("RzLieferDatum")
                        .HasColumnType("date")
                        .HasColumnName("rz_liefer_datum");

                    b.Property<string>("RzLieferId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("rz_liefer_id");

                    b.Property<TimeSpan?>("RzLieferZeit")
                        .HasColumnType("time without time zone")
                        .HasColumnName("rz_liefer_zeit");

                    b.HasKey("IdPrueferezeptErezept")
                        .HasName("er_prueferezept_erezept_pkey");

                    b.ToTable("er_prueferezept_erezept", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErPrueferezeptErezeptLieferid", b =>
                {
                    b.Property<int>("IdPrueferezeptErezept")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_prueferezept_erezept");

                    b.Property<int>("IdPrueferezeptHeader")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_prueferezept_header");

                    b.HasKey("IdPrueferezeptErezept", "IdPrueferezeptHeader")
                        .HasName("er_prueferezept_erezept_lieferid_pkey");

                    b.HasIndex("IdPrueferezeptHeader");

                    b.ToTable("er_prueferezept_erezept_lieferid", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErPrueferezeptErezeptStatusinfo", b =>
                {
                    b.Property<int>("IdPrueferezeptErezeptStatusinfo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_prueferezept_erezept_statusinfo")
                        .HasDefaultValueSql("nextval('daten.er_prueferezept_erezept_statu_id_prueferezept_erezept_statu_seq'::regclass)");

                    b.Property<short?>("Fcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fcode");

                    b.Property<string>("Fkommentar")
                        .HasColumnType("TEXT")
                        .HasColumnName("fkommentar");

                    b.Property<string>("Fkurztext")
                        .HasColumnType("TEXT")
                        .HasColumnName("fkurztext");

                    b.Property<string>("Fstatus")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("fstatus");

                    b.Property<short?>("Ftcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ftcode");

                    b.Property<int?>("IdPrueferezeptErezept")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_prueferezept_erezept");

                    b.Property<short?>("Posnr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("posnr");

                    b.HasKey("IdPrueferezeptErezeptStatusinfo")
                        .HasName("er_prueferezept_erezept_statusinfo_pkey");

                    b.HasIndex("IdPrueferezeptErezept");

                    b.ToTable("er_prueferezept_erezept_statusinfo", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErPrueferezeptHeader", b =>
                {
                    b.Property<int>("IdPrueferezeptHeader")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_prueferezept_header");

                    b.Property<long?>("ApoIkNr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("apo_ik_nr")
                        .HasDefaultValueSql("0");

                    b.Property<int>("ApoIntNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("apo_int_nr");

                    b.Property<string>("ApoPassword")
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasColumnName("apo_password");

                    b.Property<long?>("AvsSendeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("avs_sende_id");

                    b.Property<bool?>("CheckEm16")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("check_em16")
                        .HasDefaultValueSql("false")
                        .HasComment("eMuster16 Rezepte wurden überprüft");

                    b.Property<bool?>("CheckErez")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("check_erez")
                        .HasDefaultValueSql("false")
                        .HasComment("eRezepte wurden überprüft");

                    b.Property<bool?>("CheckPrez")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("check_prez")
                        .HasDefaultValueSql("false")
                        .HasComment("pRezepte wurden überprüft");

                    b.Property<short?>("ImportTyp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("import_typ")
                        .HasDefaultValueSql("0")
                        .HasComment("Art wie das Rezept importiert wurde - 0-WebService, 1-Formular, 2-Datei");

                    b.Property<string>("RezTyp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("rez_typ")
                        .HasDefaultValueSql("'X'::character varying")
                        .HasComment("eRez->ERezept, pRez->pRezept, eM16->eMuster16 Rezept, X->Unbekannt");

                    b.Property<bool?>("RezeptCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("rezept_check")
                        .HasDefaultValueSql("false")
                        .HasComment("Rezeptprüfung durchgeführt TRUE|FALSE");

                    b.Property<string>("RezeptStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("rezept_status")
                        .HasDefaultValueSql("'VOR_PRUEFUNG'::character varying");

                    b.Property<bool?>("ReztypEm16")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("reztyp_em16")
                        .HasDefaultValueSql("false")
                        .HasComment("Rezept-Typ eMuster16");

                    b.Property<bool?>("ReztypErez")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("reztyp_erez")
                        .HasDefaultValueSql("false")
                        .HasComment("Rezept-Typ eRezept");

                    b.Property<bool?>("ReztypPrez")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("reztyp_prez")
                        .HasDefaultValueSql("false")
                        .HasComment("Rezept-Typ pRezept");

                    b.Property<DateTime?>("RzLieferDatum")
                        .HasColumnType("date")
                        .HasColumnName("rz_liefer_datum");

                    b.Property<string>("RzLieferId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("rz_liefer_id");

                    b.Property<TimeSpan?>("RzLieferZeit")
                        .HasColumnType("time without time zone")
                        .HasColumnName("rz_liefer_zeit");

                    b.Property<string>("SoftwareHersteller")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("software_hersteller");

                    b.Property<string>("SoftwareName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("software_name");

                    b.Property<string>("SoftwareVersion")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("software_version");

                    b.Property<DateTime?>("StatusAbfrageDatum")
                        .HasColumnType("date")
                        .HasColumnName("status_abfrage_datum")
                        .HasComment("Abfragedatum des Status zur Liefer-ID");

                    b.Property<TimeSpan?>("StatusAbfrageZeit")
                        .HasColumnType("time without time zone")
                        .HasColumnName("status_abfrage_zeit")
                        .HasComment("Abfragezeit des Status zur Liefer-ID");

                    b.Property<bool?>("Testdaten")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("testdaten")
                        .HasDefaultValueSql("false");

                    b.HasKey("IdPrueferezeptHeader")
                        .HasName("er_prueferezept_header_pkey");

                    b.ToTable("er_prueferezept_header", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErRabattGruppe", b =>
                {
                    b.Property<int>("IdRabattGruppe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_rabatt_gruppe")
                        .HasDefaultValueSql("nextval('daten.er_rabatt_gruppe_temp_id_rabatt_gruppe_seq'::regclass)");

                    b.Property<DateTime?>("GueltigAb")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_ab");

                    b.Property<DateTime?>("GueltigBis")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_bis");

                    b.Property<int?>("KeyGruppe")
                        .HasColumnType("INTEGER")
                        .HasColumnName("key_gruppe");

                    b.Property<short?>("Mkv")
                        .HasColumnType("INTEGER")
                        .HasColumnName("mkv");

                    b.Property<short?>("ZuzahlungFaktor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("zuzahlung_faktor");

                    b.HasKey("IdRabattGruppe")
                        .HasName("er_rabatt_gruppe_temp_pkey");

                    b.HasIndex(new[] { "KeyGruppe", "GueltigAb", "GueltigBis" }, "idx_er_rabatt_gruppe_keygruppe_gueltigabbis_20210401");

                    b.ToTable("er_rabatt_gruppe", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErRabattGruppeTemp", b =>
                {
                    b.Property<int>("IdRabattGruppe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_rabatt_gruppe")
                        .HasDefaultValueSql("nextval('daten.er_rabatt_gruppe_id_rabatt_gruppe_seq'::regclass)");

                    b.Property<DateTime?>("GueltigAb")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_ab");

                    b.Property<DateTime?>("GueltigBis")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_bis");

                    b.Property<int?>("KeyGruppe")
                        .HasColumnType("INTEGER")
                        .HasColumnName("key_gruppe");

                    b.Property<short?>("Mkv")
                        .HasColumnType("INTEGER")
                        .HasColumnName("mkv");

                    b.Property<short?>("ZuzahlungFaktor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("zuzahlung_faktor");

                    b.HasKey("IdRabattGruppe")
                        .HasName("er_rabatt_gruppe_pkey");

                    b.ToTable("er_rabatt_gruppe_temp", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErRabattIndika", b =>
                {
                    b.Property<int>("IdRabattIndika")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_rabatt_indika")
                        .HasDefaultValueSql("nextval('daten.er_rabatt_indika_temp_id_rabatt_indika_seq'::regclass)");

                    b.Property<DateTime?>("GueltigAb")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_ab");

                    b.Property<DateTime?>("GueltigBis")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_bis");

                    b.Property<int?>("Indikation")
                        .HasColumnType("INTEGER")
                        .HasColumnName("indikation");

                    b.Property<long?>("Pzn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pzn");

                    b.HasKey("IdRabattIndika")
                        .HasName("er_rabatt_indika_pkey");

                    b.HasIndex(new[] { "Indikation", "Pzn" }, "idx_er_rabatt_indika_indikation_pzn_20210401");

                    b.HasIndex(new[] { "Pzn", "GueltigAb", "GueltigBis" }, "idx_er_rabatt_indika_pzn_gueltigabbis_20210401");

                    b.ToTable("er_rabatt_indika", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErRabattIndikaTemp", b =>
                {
                    b.Property<int>("IdRabattIndika")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_rabatt_indika")
                        .HasDefaultValueSql("nextval('daten.er_rabatt_indika_id_rabatt_indika_seq'::regclass)");

                    b.Property<DateTime?>("GueltigAb")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_ab");

                    b.Property<DateTime?>("GueltigBis")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_bis");

                    b.Property<int?>("Indikation")
                        .HasColumnType("INTEGER")
                        .HasColumnName("indikation");

                    b.Property<long?>("Pzn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pzn");

                    b.HasKey("IdRabattIndika")
                        .HasName("er_rabatt_indika_temp_pkey");

                    b.ToTable("er_rabatt_indika_temp", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErRabattKasse", b =>
                {
                    b.Property<int>("IdRabattKasse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_rabatt_kasse")
                        .HasDefaultValueSql("nextval('daten.er_rabatt_kasse_temp_id_rabatt_kasse_seq'::regclass)");

                    b.Property<DateTime?>("GueltigAb")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_ab");

                    b.Property<DateTime?>("GueltigBis")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_bis");

                    b.Property<int?>("KasseIk")
                        .HasColumnType("INTEGER")
                        .HasColumnName("kasse_ik");

                    b.Property<int?>("KeyGruppe")
                        .HasColumnType("INTEGER")
                        .HasColumnName("key_gruppe");

                    b.HasKey("IdRabattKasse")
                        .HasName("er_rabatt_kasse_temp_pkey");

                    b.HasIndex(new[] { "KeyGruppe", "GueltigAb", "GueltigBis" }, "idx_er_rabatt_kasse_keygruppe_gueltigabbis_20210401");

                    b.ToTable("er_rabatt_kasse", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErRabattKasseTemp", b =>
                {
                    b.Property<int>("IdRabattKasse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_rabatt_kasse")
                        .HasDefaultValueSql("nextval('daten.er_rabatt_kasse_id_rabatt_kasse_seq'::regclass)");

                    b.Property<DateTime?>("GueltigAb")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_ab");

                    b.Property<DateTime?>("GueltigBis")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_bis");

                    b.Property<int?>("KasseIk")
                        .HasColumnType("INTEGER")
                        .HasColumnName("kasse_ik");

                    b.Property<int?>("KeyGruppe")
                        .HasColumnType("INTEGER")
                        .HasColumnName("key_gruppe");

                    b.HasKey("IdRabattKasse")
                        .HasName("er_rabatt_kasse_pkey");

                    b.ToTable("er_rabatt_kasse_temp", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErRabattPzn", b =>
                {
                    b.Property<long>("IdRabattPzn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_rabatt_pzn")
                        .HasDefaultValueSql("nextval('daten.er_rabatt_pzn_temp_id_rabatt_pzn_seq'::regclass)");

                    b.Property<long?>("ArzneiPzn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("arznei_pzn");

                    b.Property<DateTime?>("GueltigAb")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_ab");

                    b.Property<DateTime?>("GueltigBis")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_bis");

                    b.Property<int?>("KeyGruppe")
                        .HasColumnType("INTEGER")
                        .HasColumnName("key_gruppe");

                    b.HasKey("IdRabattPzn")
                        .HasName("er_rabatt_pzn_pkey");

                    b.HasIndex(new[] { "ArzneiPzn", "KeyGruppe", "GueltigAb", "GueltigBis" }, "idx_er_rabatt_pzn_arzneipzn_keygruppe_gueltigabbis_20210401");

                    b.ToTable("er_rabatt_pzn", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErRabattPznTemp", b =>
                {
                    b.Property<long>("IdRabattPzn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_rabatt_pzn")
                        .HasDefaultValueSql("nextval('daten.er_rabatt_pzn_temp_id_rabatt_pzn_seq1'::regclass)");

                    b.Property<long?>("ArzneiPzn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("arznei_pzn");

                    b.Property<DateTime?>("GueltigAb")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_ab");

                    b.Property<DateTime?>("GueltigBis")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_bis");

                    b.Property<int?>("KeyGruppe")
                        .HasColumnType("INTEGER")
                        .HasColumnName("key_gruppe");

                    b.HasKey("IdRabattPzn")
                        .HasName("er_rabatt_pzn_temp_pkey");

                    b.ToTable("er_rabatt_pzn_temp", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErRabattWirkstoff", b =>
                {
                    b.Property<long>("Pzn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pzn");

                    b.Property<int>("Komponentennr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("komponentennr");

                    b.Property<int>("FaiDbRang")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fai_db_rang");

                    b.Property<DateTime>("GueltigBis")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_bis");

                    b.Property<int>("FaiDbKeySto")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fai_db_key_sto");

                    b.Property<float>("FaiDbZahl")
                        .HasColumnType("REAL")
                        .HasColumnName("fai_db_zahl");

                    b.Property<string>("FakDbAbsolutbezugEinheit")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasColumnName("fak_db_absolutbezug_einheit");

                    b.Property<string>("FamDbKeyAtc")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("TEXT")
                        .HasColumnName("fam_db_key_atc");

                    b.Property<string>("FamDbKeyDar")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasColumnName("fam_db_key_dar");

                    b.Property<string>("FamDbKeyIndHaupt")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("fam_db_key_ind_haupt");

                    b.Property<string>("FamDbKeyIndNeben")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("fam_db_key_ind_neben");

                    b.Property<DateTime>("GueltigAb")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_ab");

                    b.Property<int>("PacApoImportgruppennr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pac_apo_importgruppennr");

                    b.Property<int>("PacApoKeyAus")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pac_apo_key_aus");

                    b.Property<string>("PacApoKeyWar")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT")
                        .HasColumnName("pac_apo_key_war");

                    b.Property<int>("PgrApoEinstufung")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pgr_apo_einstufung");

                    b.HasKey("Pzn", "Komponentennr", "FaiDbRang", "GueltigBis")
                        .HasName("er_rabatt_wirkstoff_pkey");

                    b.HasIndex(new[] { "Pzn", "GueltigAb", "GueltigBis" }, "idx_er_rabatt_wirkstoff_pzn_gueltigabbis_20210401");

                    b.ToTable("er_rabatt_wirkstoff", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErRabattWirkstoffTemp", b =>
                {
                    b.Property<long>("Pzn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pzn");

                    b.Property<int>("Komponentennr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("komponentennr");

                    b.Property<int>("FaiDbRang")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fai_db_rang");

                    b.Property<DateTime>("GueltigBis")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_bis");

                    b.Property<int>("FaiDbKeySto")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fai_db_key_sto");

                    b.Property<float>("FaiDbZahl")
                        .HasColumnType("REAL")
                        .HasColumnName("fai_db_zahl");

                    b.Property<string>("FakDbAbsolutbezugEinheit")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasColumnName("fak_db_absolutbezug_einheit");

                    b.Property<string>("FamDbKeyAtc")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("TEXT")
                        .HasColumnName("fam_db_key_atc");

                    b.Property<string>("FamDbKeyDar")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasColumnName("fam_db_key_dar");

                    b.Property<string>("FamDbKeyIndHaupt")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("fam_db_key_ind_haupt");

                    b.Property<string>("FamDbKeyIndNeben")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("fam_db_key_ind_neben");

                    b.Property<DateTime>("GueltigAb")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_ab");

                    b.Property<int>("PacApoImportgruppennr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pac_apo_importgruppennr");

                    b.Property<int>("PacApoKeyAus")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pac_apo_key_aus");

                    b.Property<string>("PacApoKeyWar")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT")
                        .HasColumnName("pac_apo_key_war");

                    b.Property<int>("PgrApoEinstufung")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pgr_apo_einstufung");

                    b.HasKey("Pzn", "Komponentennr", "FaiDbRang", "GueltigBis")
                        .HasName("er_rabatt_wirkstoff_temp_pkey");

                    b.ToTable("er_rabatt_wirkstoff_temp", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSecAccessFiverx", b =>
                {
                    b.Property<int>("IdSecAccessFiverx")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_sec_access_fiverx");

                    b.Property<DateTime?>("AenDatum")
                        .HasColumnType("date")
                        .HasColumnName("aen_datum");

                    b.Property<int?>("AenIdSecUser")
                        .HasColumnType("INTEGER")
                        .HasColumnName("aen_id_sec_user");

                    b.Property<TimeSpan?>("AenZeit")
                        .HasColumnType("time(0) without time zone")
                        .HasColumnName("aen_zeit");

                    b.Property<bool?>("Em16Uc61Asyn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("em16_uc61_asyn")
                        .HasDefaultValueSql("false");

                    b.Property<bool?>("Em16Uc61Syn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("em16_uc61_syn")
                        .HasDefaultValueSql("false");

                    b.Property<bool?>("Em16Uc61U1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("em16_uc61_u1")
                        .HasDefaultValueSql("false");

                    b.Property<bool?>("ErezUc4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("erez_uc4")
                        .HasDefaultValueSql("false");

                    b.Property<bool?>("ErezUc51")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("erez_uc51")
                        .HasDefaultValueSql("false");

                    b.Property<bool?>("ErezUc52")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("erez_uc52")
                        .HasDefaultValueSql("false");

                    b.Property<bool?>("ErezUc62Asyn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("erez_uc62_asyn")
                        .HasDefaultValueSql("false");

                    b.Property<bool?>("ErezUc62Syn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("erez_uc62_syn")
                        .HasDefaultValueSql("false");

                    b.Property<bool?>("ErezUc7")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("erez_uc7")
                        .HasDefaultValueSql("false");

                    b.Property<bool?>("Freigegeben")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("freigegeben")
                        .HasDefaultValueSql("false");

                    b.Property<int>("IdApotheke")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_apotheke");

                    b.Property<string>("LoginId")
                        .IsRequired()
                        .HasMaxLength(47)
                        .HasColumnType("TEXT")
                        .HasColumnName("login_id");

                    b.Property<string>("LoginPasswort")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("login_passwort");

                    b.Property<string>("LoginPasswortCrypt")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("login_passwort_crypt");

                    b.HasKey("IdSecAccessFiverx")
                        .HasName("er_sec_access_fiverx_pkey");

                    b.HasIndex("IdApotheke");

                    b.HasIndex(new[] { "LoginId" }, "er_sec_access_fiverx_login_id_key")
                        .IsUnique();

                    b.HasIndex(new[] { "LoginId" }, "idx_er_sec_access_fiverx_login_id")
                        .IsUnique();

                    b.ToTable("er_sec_access_fiverx", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteEmuster16", b =>
                {
                    b.Property<int>("IdSenderezepteEmuster16")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_emuster16");

                    b.Property<string>("AbdaKassentyp")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("abda_kassentyp")
                        .HasComment("kArt");

                    b.Property<DateTime?>("Abgabedatum")
                        .HasColumnType("date")
                        .HasColumnName("abgabedatum")
                        .HasComment("abDatum");

                    b.Property<string>("AbrechnungsPeriode")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("abrechnungs_periode")
                        .HasComment("aPeriode");

                    b.Property<long?>("ApoIkNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("apo_ik_nr");

                    b.Property<string>("Arbeitsplatz")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("arbeitsplatz")
                        .HasComment("arbPlatz");

                    b.Property<long?>("ArztNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("arzt_nr")
                        .HasComment("laNr - Lebenslange Arzt-Nummer");

                    b.Property<string>("AvsId")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("avs_id");

                    b.Property<string>("Bediener")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("bediener");

                    b.Property<short?>("BegrPflicht")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("begr_pflicht")
                        .HasDefaultValueSql("0")
                        .HasComment("bgrPfl");

                    b.Property<long?>("BetriebsstaettenNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("betriebsstaetten_nr")
                        .HasComment("vrtrgsArztNr - Betriebsstättennummer oder Praxis-Nummer");

                    b.Property<decimal?>("Eigenanteil")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(11, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("eigenanteil")
                        .HasDefaultValueSql("0")
                        .HasComment("eigBet");

                    b.Property<decimal?>("GesamtesBrutto")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(11, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("gesamtes_brutto")
                        .HasDefaultValueSql("0");

                    b.Property<int>("IdSenderezepteHeader")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_header");

                    b.Property<long?>("KkIkNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("kk_ik_nr")
                        .HasComment("Krankenkassen-Ik der Versicherung");

                    b.Property<string>("KkName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("kk_name")
                        .HasComment("kName");

                    b.Property<string>("KkTyp")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("kk_typ")
                        .HasComment("rTyp");

                    b.Property<short?>("KzArbeitsunfall")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_arbeitsunfall")
                        .HasDefaultValueSql("0")
                        .HasComment("aUnfall");

                    b.Property<short?>("KzBvg")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_bvg")
                        .HasDefaultValueSql("0")
                        .HasComment("bvg");

                    b.Property<short?>("KzGebuehrenFrei")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_gebuehren_frei")
                        .HasDefaultValueSql("0")
                        .HasComment("gebFrei");

                    b.Property<short?>("KzHilfsmittel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_hilfsmittel")
                        .HasDefaultValueSql("0")
                        .HasComment("hilf");

                    b.Property<short?>("KzImpfstoff")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_impfstoff")
                        .HasDefaultValueSql("0")
                        .HasComment("impf");

                    b.Property<short?>("KzNoctu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_noctu")
                        .HasDefaultValueSql("0")
                        .HasComment("noctu");

                    b.Property<short?>("KzSonstige")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_sonstige")
                        .HasDefaultValueSql("0")
                        .HasComment("sonstige");

                    b.Property<short?>("KzSprechstundenbedarf")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_sprechstundenbedarf")
                        .HasDefaultValueSql("0")
                        .HasComment("sprStBedarf");

                    b.Property<short?>("KzUnfall")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_unfall")
                        .HasDefaultValueSql("0")
                        .HasComment("unfall");

                    b.Property<long?>("Muster16Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("muster16_id");

                    b.Property<string>("RezeptTyp")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("rezept_typ")
                        .HasComment("Nur STANDARDREZEPT, BTM, SPRECHSTUNDENBEDARF");

                    b.Property<string>("RzDatum")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("rz_datum");

                    b.Property<DateTime?>("RzLieferDatum")
                        .HasColumnType("date")
                        .HasColumnName("rz_liefer_datum");

                    b.Property<string>("RzLieferId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("rz_liefer_id");

                    b.Property<TimeSpan?>("RzLieferZeit")
                        .HasColumnType("time without time zone")
                        .HasColumnName("rz_liefer_zeit");

                    b.Property<short?>("TFachinformation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("t_fachinformation")
                        .HasDefaultValueSql("0")
                        .HasComment("tFachinformation");

                    b.Property<short?>("TInLabel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("t_in_label")
                        .HasDefaultValueSql("0")
                        .HasComment("tInLabel");

                    b.Property<short?>("TOffLabel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("t_off_label")
                        .HasDefaultValueSql("0")
                        .HasComment("tOffLabel");

                    b.Property<short?>("TSicherheitsbestimmung")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("t_sicherheitsbestimmung")
                        .HasDefaultValueSql("0")
                        .HasComment("tSicherheitsbestimmung");

                    b.Property<DateTime?>("UnfallDatum")
                        .HasColumnType("date")
                        .HasColumnName("unfall_datum")
                        .HasComment("unfallTag");

                    b.Property<DateTime?>("Verordnungsdatum")
                        .HasColumnType("date")
                        .HasColumnName("verordnungsdatum")
                        .HasComment("verDat - Ausstellungsdatum - Verordnungsdatum");

                    b.Property<DateTime?>("VersichertenGeburtsdatum")
                        .HasColumnType("date")
                        .HasColumnName("versicherten_geburtsdatum")
                        .HasComment("vGeb");

                    b.Property<string>("VersichertenName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("versicherten_name")
                        .HasComment("vName");

                    b.Property<string>("VersichertenNummer")
                        .HasMaxLength(12)
                        .HasColumnType("TEXT")
                        .HasColumnName("versicherten_nummer")
                        .HasComment("vrsNr");

                    b.Property<string>("VersichertenOrt")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("versicherten_ort")
                        .HasComment("vOrt");

                    b.Property<string>("VersichertenPlz")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("versicherten_plz")
                        .HasComment("vPlz");

                    b.Property<string>("VersichertenStatus")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("versicherten_status")
                        .HasComment("vStat");

                    b.Property<string>("VersichertenStrasse")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("versicherten_strasse")
                        .HasComment("vStr");

                    b.Property<string>("VersichertenTitel")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("versicherten_titel")
                        .HasComment("vTitel");

                    b.Property<string>("VersichertenVorname")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("versicherten_vorname")
                        .HasComment("vVorname");

                    b.Property<string>("VersichertenkarteGueltigBis")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("versichertenkarte_gueltig_bis")
                        .HasComment("vkGueltigBis");

                    b.Property<decimal?>("Zuzahlung")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(11, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("zuzahlung")
                        .HasDefaultValueSql("0");

                    b.HasKey("IdSenderezepteEmuster16")
                        .HasName("er_senderezepte_emuster16_pkey");

                    b.HasIndex("IdSenderezepteHeader");

                    b.HasIndex(new[] { "ApoIkNr" }, "idx_er_sendrez_apoik");

                    b.HasIndex(new[] { "Muster16Id", "RzLieferId" }, "idx_er_sendrez_em16_muster16_id");

                    b.HasIndex(new[] { "RzLieferId", "Muster16Id" }, "idx_er_sendrez_em16_rz_liefer_id");

                    b.ToTable("er_senderezepte_emuster16", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteEmuster16Artikel", b =>
                {
                    b.Property<int>("IdSenderezepteEmuster16Artikel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_emuster16_artikel")
                        .HasDefaultValueSql("nextval('daten.er_senderezepte_emuster16_art_id_senderezepte_emuster16_art_seq'::regclass)");

                    b.Property<short?>("ArtikelAutidem")
                        .HasColumnType("INTEGER")
                        .HasColumnName("artikel_autidem");

                    b.Property<int?>("ArtikelFaktor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("artikel_faktor");

                    b.Property<string>("ArtikelMediName")
                        .HasMaxLength(130)
                        .HasColumnType("TEXT")
                        .HasColumnName("artikel_medi_name");

                    b.Property<decimal?>("ArtikelTaxe")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(11, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("artikel_taxe")
                        .HasDefaultValueSql("0");

                    b.Property<long?>("ArzneiPzn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("arznei_pzn");

                    b.Property<short?>("AtrikelNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("atrikel_nr");

                    b.Property<long?>("HilfsmittelNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hilfsmittel_nr");

                    b.Property<int?>("IdSenderezepteEmuster16")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_emuster16");

                    b.HasKey("IdSenderezepteEmuster16Artikel")
                        .HasName("er_senderezepte_emuster16_artikel_pkey");

                    b.HasIndex(new[] { "IdSenderezepteEmuster16" }, "idx_er_sendrez_em16_artikel_id");

                    b.ToTable("er_senderezepte_emuster16_artikel", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteEmuster16Daten", b =>
                {
                    b.Property<int>("IdSenderezepteEmuster16Daten")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_emuster16_daten")
                        .HasDefaultValueSql("nextval('daten.er_senderezepte_emuster16_dat_id_senderezepte_emuster16_dat_seq'::regclass)");

                    b.Property<int?>("IdSenderezepteEmuster16")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_emuster16");

                    b.Property<string>("RezeptUuid")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("TEXT")
                        .HasColumnName("rezept_uuid")
                        .HasComment("Eindeutiger Rezept - Universal Unique Identifier (UUID)");

                    b.Property<bool?>("TransferArz")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("transfer_arz")
                        .HasDefaultValueSql("false")
                        .HasComment("Bestätigung vom ARZ - Transfer der Rezeptdaten erfolgt");

                    b.Property<string>("XmlRequest")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("xml_request")
                        .HasComment("Original XML-Request der Apotheke (nur Rezept-XML) - zur Weiterleitung ins ARZ");

                    b.HasKey("IdSenderezepteEmuster16Daten")
                        .HasName("er_senderezepte_emuster16_daten_pkey");

                    b.HasIndex(new[] { "IdSenderezepteEmuster16" }, "idx_er_sendrez_em16_daten_id");

                    b.ToTable("er_senderezepte_emuster16_daten", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteEmuster16Status", b =>
                {
                    b.Property<int>("IdSenderezepteEmuster16Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_emuster16_status")
                        .HasDefaultValueSql("nextval('daten.er_senderezepte_emuster16_sta_id_senderezepte_emuster16_sta_seq'::regclass)");

                    b.Property<string>("AbrechenStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("abrechen_status")
                        .HasDefaultValueSql("'VOR_PRUEFUNG'::character varying")
                        .HasComment("Interner Status - enthält immer das Prüfergebnis");

                    b.Property<int?>("IdSenderezepteEmuster16")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_emuster16");

                    b.Property<long?>("Muster16Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("muster16_id");

                    b.Property<bool?>("RezeptCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("rezept_check")
                        .HasDefaultValueSql("false");

                    b.Property<string>("RezeptStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("rezept_status")
                        .HasDefaultValueSql("'VOR_PRUEFUNG'::character varying");

                    b.Property<string>("RzAbfrageId")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("rz_abfrage_id")
                        .HasComment("ID mit der alle DS gekennzeichnet sind die innerhalb einer RCS Abfrage gesendet wurden");

                    b.Property<DateTime?>("StatusAbfrageDatum")
                        .HasColumnType("date")
                        .HasColumnName("status_abfrage_datum")
                        .HasComment("Abfragedatum des Status zum Rezept");

                    b.Property<TimeSpan?>("StatusAbfrageZeit")
                        .HasColumnType("time without time zone")
                        .HasColumnName("status_abfrage_zeit")
                        .HasComment("Abfragezeit des Status zum Rezept");

                    b.HasKey("IdSenderezepteEmuster16Status")
                        .HasName("er_senderezepte_emuster16_status_pkey");

                    b.HasIndex(new[] { "IdSenderezepteEmuster16", "Muster16Id", "RezeptStatus" }, "idx_er_sendrez_em16_stat_idrezem16");

                    b.ToTable("er_senderezepte_emuster16_status", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteEmuster16Statusinfo", b =>
                {
                    b.Property<int>("IdSenderezepteEmuster16Statusinfo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_emuster16_statusinfo")
                        .HasDefaultValueSql("nextval('daten.er_senderezepte_emuster16_sta_id_senderezepte_emuster16_st_seq1'::regclass)");

                    b.Property<string>("Fcode")
                        .HasMaxLength(4)
                        .HasColumnType("TEXT")
                        .HasColumnName("fcode");

                    b.Property<string>("Fkommentar")
                        .HasColumnType("TEXT")
                        .HasColumnName("fkommentar");

                    b.Property<string>("Fkurztext")
                        .HasColumnType("TEXT")
                        .HasColumnName("fkurztext");

                    b.Property<string>("Fstatus")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("fstatus");

                    b.Property<string>("Ftcode")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasColumnName("ftcode");

                    b.Property<int?>("IdSenderezepteEmuster16")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_emuster16");

                    b.Property<short?>("Posnr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("posnr");

                    b.Property<string>("RegelNr")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("regel_nr");

                    b.Property<string>("RegelTrefferCode")
                        .HasMaxLength(7)
                        .HasColumnType("TEXT")
                        .HasColumnName("regel_treffer_code");

                    b.HasKey("IdSenderezepteEmuster16Statusinfo")
                        .HasName("er_senderezepte_emuster16_statusinfo_pkey");

                    b.HasIndex(new[] { "IdSenderezepteEmuster16" }, "idx_er_sendrez_em16_stinfo_id");

                    b.ToTable("er_senderezepte_emuster16_statusinfo", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteErezept", b =>
                {
                    b.Property<int>("IdSenderezepteErezept")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_erezept");

                    b.Property<string>("AbrechnungsPeriode")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("abrechnungs_periode");

                    b.Property<long?>("ApoIkNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("apo_ik_nr");

                    b.Property<string>("AvsId")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("avs_id");

                    b.Property<string>("ErezeptData")
                        .HasColumnType("TEXT")
                        .HasColumnName("erezept_data")
                        .HasComment("Base64 Codierung der eRezept Daten");

                    b.Property<string>("ErezeptId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("erezept_id");

                    b.Property<int>("IdSenderezepteHeader")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_header");

                    b.Property<string>("RzDatum")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("rz_datum");

                    b.Property<DateTime?>("RzLieferDatum")
                        .HasColumnType("date")
                        .HasColumnName("rz_liefer_datum");

                    b.Property<string>("RzLieferId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("rz_liefer_id");

                    b.Property<TimeSpan?>("RzLieferZeit")
                        .HasColumnType("time without time zone")
                        .HasColumnName("rz_liefer_zeit");

                    b.HasKey("IdSenderezepteErezept")
                        .HasName("er_senderezepte_erezept_pkey");

                    b.HasIndex("IdSenderezepteHeader");

                    b.ToTable("er_senderezepte_erezept", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteErezeptDaten", b =>
                {
                    b.Property<int>("IdSenderezepteErezeptDaten")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_erezept_daten");

                    b.Property<int?>("IdSenderezepteErezept")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_erezept");

                    b.Property<string>("RezeptUuid")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("TEXT")
                        .HasColumnName("rezept_uuid")
                        .HasComment("Eindeutiger Rezept - Universal Unique Identifier (UUID)");

                    b.Property<bool?>("TransferArz")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("transfer_arz")
                        .HasDefaultValueSql("false")
                        .HasComment("Bestätigung vom ARZ - Transfer der Rezeptdaten erfolgt");

                    b.Property<string>("XmlRequest")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("xml_request")
                        .HasComment("Original XML-Request der Apotheke (nur Rezept-XML) - zur Weiterleitung ins ARZ");

                    b.HasKey("IdSenderezepteErezeptDaten")
                        .HasName("er_senderezepte_erezept_daten_pkey");

                    b.HasIndex(new[] { "IdSenderezepteErezept" }, "idx_er_sendrez_erez_daten_id");

                    b.ToTable("er_senderezepte_erezept_daten", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteErezeptStatus", b =>
                {
                    b.Property<int>("IdSenderezepteErezeptStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_erezept_status")
                        .HasDefaultValueSql("nextval('daten.er_senderezepte_erezept_statu_id_senderezepte_erezept_statu_seq'::regclass)");

                    b.Property<string>("AbrechenStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("abrechen_status")
                        .HasDefaultValueSql("'VOR_PRUEFUNG'::character varying")
                        .HasComment("Interner Status - enthält immer das Prüfergebnis");

                    b.Property<string>("ErezeptId")
                        .HasMaxLength(22)
                        .HasColumnType("TEXT")
                        .HasColumnName("erezept_id");

                    b.Property<int?>("IdSenderezepteErezept")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_erezept");

                    b.Property<bool?>("RezeptCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("rezept_check")
                        .HasDefaultValueSql("false");

                    b.Property<string>("RezeptStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("rezept_status")
                        .HasDefaultValueSql("'VOR_PRUEFUNG'::character varying");

                    b.Property<string>("RzAbfrageId")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("rz_abfrage_id")
                        .HasComment("ID mit der alle DS gekennzeichnet sind die innerhalb einer RCS Abfrage gesendet wurden");

                    b.Property<DateTime?>("StatusAbfrageDatum")
                        .HasColumnType("date")
                        .HasColumnName("status_abfrage_datum")
                        .HasComment("Abfragedatum des Status zum Rezept");

                    b.Property<TimeSpan?>("StatusAbfrageZeit")
                        .HasColumnType("time without time zone")
                        .HasColumnName("status_abfrage_zeit")
                        .HasComment("Abfragezeit des Status zum Rezept");

                    b.HasKey("IdSenderezepteErezeptStatus")
                        .HasName("er_senderezepte_erezept_status_pkey");

                    b.HasIndex(new[] { "IdSenderezepteErezept", "ErezeptId", "RezeptStatus" }, "idx_er_sendrez_erez_stat_idrezerez");

                    b.ToTable("er_senderezepte_erezept_status", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteErezeptStatusinfo", b =>
                {
                    b.Property<int>("IdSenderezepteErezeptStatusinfo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_erezept_statusinfo")
                        .HasDefaultValueSql("nextval('daten.er_senderezepte_erezept_statu_id_senderezepte_erezept_stat_seq1'::regclass)");

                    b.Property<string>("Fcode")
                        .HasMaxLength(4)
                        .HasColumnType("TEXT")
                        .HasColumnName("fcode");

                    b.Property<string>("Fkommentar")
                        .HasColumnType("TEXT")
                        .HasColumnName("fkommentar");

                    b.Property<string>("Fkurztext")
                        .HasColumnType("TEXT")
                        .HasColumnName("fkurztext");

                    b.Property<string>("Fstatus")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("fstatus");

                    b.Property<string>("Ftcode")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasColumnName("ftcode");

                    b.Property<int?>("IdSenderezepteErezept")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_erezept");

                    b.Property<short?>("Posnr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("posnr");

                    b.Property<string>("RegelNr")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("regel_nr");

                    b.Property<string>("RegelTrefferCode")
                        .HasMaxLength(7)
                        .HasColumnType("TEXT")
                        .HasColumnName("regel_treffer_code");

                    b.HasKey("IdSenderezepteErezeptStatusinfo")
                        .HasName("er_senderezepte_erezept_statusinfo_pkey");

                    b.HasIndex(new[] { "IdSenderezepteErezept" }, "idx_er_sendrez_erez_stinfo_id");

                    b.ToTable("er_senderezepte_erezept_statusinfo", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteHeader", b =>
                {
                    b.Property<int>("IdSenderezepteHeader")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_header");

                    b.Property<DateTime?>("AbfrageDatum")
                        .HasColumnType("date")
                        .HasColumnName("abfrage_datum")
                        .HasComment("Abfragedatum des Status zur Liefer-ID");

                    b.Property<TimeSpan?>("AbfrageZeit")
                        .HasColumnType("time without time zone")
                        .HasColumnName("abfrage_zeit")
                        .HasComment("Abfragezeit des Status zur Liefer-ID");

                    b.Property<long?>("ApoIkNr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("apo_ik_nr")
                        .HasDefaultValueSql("0");

                    b.Property<int>("ApoIntNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("apo_int_nr");

                    b.Property<string>("ApoPassword")
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasColumnName("apo_password");

                    b.Property<long?>("AvsSendeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("avs_sende_id");

                    b.Property<DateTime?>("CheckDatum")
                        .HasColumnType("date")
                        .HasColumnName("check_datum")
                        .HasComment("Datum des letzten Checks der Rezepte dieser LieferID");

                    b.Property<bool?>("CheckEm16")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("check_em16")
                        .HasDefaultValueSql("false")
                        .HasComment("eMuster16 Rezepte wurden überprüft");

                    b.Property<bool?>("CheckErez")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("check_erez")
                        .HasDefaultValueSql("false")
                        .HasComment("eRezepte wurden überprüft");

                    b.Property<bool?>("CheckPrez")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("check_prez")
                        .HasDefaultValueSql("false")
                        .HasComment("pRezepte wurden überprüft");

                    b.Property<TimeSpan?>("CheckZeit")
                        .HasColumnType("time without time zone")
                        .HasColumnName("check_zeit")
                        .HasComment("Zeit des letzten Checks der Rezepte dieser LieferID");

                    b.Property<short?>("ImportTyp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("import_typ")
                        .HasDefaultValueSql("0")
                        .HasComment("Art wie das Rezept importiert wurde - 0-WebService, 1-Formular, 2-Datei");

                    b.Property<string>("RezTyp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("rez_typ")
                        .HasDefaultValueSql("'X'::character varying")
                        .HasComment("eRez->ERezept, pRez->pRezept, eM16->eMuster16 Rezept, X->Unbekannt");

                    b.Property<bool?>("RezeptCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("rezept_check")
                        .HasDefaultValueSql("false")
                        .HasComment("Rezeptprüfung durchgeführt TRUE|FALSE");

                    b.Property<string>("RezeptStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("rezept_status")
                        .HasDefaultValueSql("'VOR_PRUEFUNG'::character varying");

                    b.Property<bool?>("ReztypEm16")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("reztyp_em16")
                        .HasDefaultValueSql("false")
                        .HasComment("Rezept-Typ eMuster16");

                    b.Property<bool?>("ReztypErez")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("reztyp_erez")
                        .HasDefaultValueSql("false")
                        .HasComment("Rezept-Typ eRezept");

                    b.Property<bool?>("ReztypPrez")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("reztyp_prez")
                        .HasDefaultValueSql("false")
                        .HasComment("Rezept-Typ pRezept");

                    b.Property<DateTime?>("RzLieferDatum")
                        .HasColumnType("date")
                        .HasColumnName("rz_liefer_datum");

                    b.Property<string>("RzLieferId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("rz_liefer_id");

                    b.Property<TimeSpan?>("RzLieferZeit")
                        .HasColumnType("time without time zone")
                        .HasColumnName("rz_liefer_zeit");

                    b.Property<string>("SoftwareHersteller")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("software_hersteller");

                    b.Property<string>("SoftwareName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("software_name");

                    b.Property<string>("SoftwareVersion")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("software_version");

                    b.Property<bool?>("Testdaten")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("testdaten")
                        .HasDefaultValueSql("false");

                    b.HasKey("IdSenderezepteHeader")
                        .HasName("er_senderezepte_header_pkey");

                    b.HasIndex(new[] { "ApoIntNr", "RzLieferId" }, "idx_er_sendrez_head_apo_int_nr");

                    b.HasIndex(new[] { "RzLieferId", "ApoIntNr" }, "idx_er_sendrez_head_rz_liefer_id");

                    b.ToTable("er_senderezepte_header", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteHeaderDaten", b =>
                {
                    b.Property<int>("IdSenderezepteHeaderDaten")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_header_daten");

                    b.Property<string>("HeaderUuid")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("TEXT")
                        .HasColumnName("header_uuid")
                        .HasComment("Eindeutige Header - Universal Unique Identifier (UUID)");

                    b.Property<int?>("IdSenderezepteHeader")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_header");

                    b.Property<bool?>("TransferArz")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("transfer_arz")
                        .HasDefaultValueSql("false")
                        .HasComment("Bestätigung vom ARZ - Transfer der Rezeptdaten erfolgt");

                    b.Property<string>("XmlRequest")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("xml_request")
                        .HasComment("Kompletter Original XML-Request der Apotheke - zur Weiterleitung ins ARZ");

                    b.HasKey("IdSenderezepteHeaderDaten")
                        .HasName("er_senderezepte_header_daten_pkey");

                    b.HasIndex(new[] { "IdSenderezepteHeader" }, "idx_er_sendrez_header_daten_id");

                    b.ToTable("er_senderezepte_header_daten", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezeptePrezept", b =>
                {
                    b.Property<int>("IdSenderezeptePrezept")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_prezept");

                    b.Property<string>("AbdaKassentyp")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("abda_kassentyp")
                        .HasComment("kArt");

                    b.Property<DateTime?>("Abgabedatum")
                        .HasColumnType("date")
                        .HasColumnName("abgabedatum")
                        .HasComment("abDatum");

                    b.Property<string>("AbrechnungsPeriode")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("abrechnungs_periode")
                        .HasComment("aPeriode");

                    b.Property<long?>("ApoIkNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("apo_ik_nr")
                        .HasComment("apoIk");

                    b.Property<string>("Arbeitsplatz")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("arbeitsplatz")
                        .HasComment("arbPlatz");

                    b.Property<long?>("ArztNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("arzt_nr")
                        .HasComment("laNr - Lebenslange Arzt-Nummer");

                    b.Property<string>("AvsId")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("avs_id");

                    b.Property<string>("Bediener")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("bediener");

                    b.Property<long?>("BetriebsstaettenNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("betriebsstaetten_nr")
                        .HasComment("vrtrgsArztNr - Betriebsstättennummer oder Praxis-Nummer");

                    b.Property<string>("ErstellungsZeitpunkt")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("erstellungs_zeitpunkt")
                        .HasComment("erstellungsZeitpunkt");

                    b.Property<decimal?>("GesamtesBrutto")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(11, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("gesamtes_brutto")
                        .HasDefaultValueSql("0");

                    b.Property<string>("HashCode")
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("hash_code")
                        .HasComment("hashCode");

                    b.Property<int>("IdSenderezepteHeader")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_header");

                    b.Property<long?>("KkIkNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("kk_ik_nr")
                        .HasComment("kkIk Krankenkassen-Ik der Versicherung");

                    b.Property<string>("KkName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("kk_name")
                        .HasComment("kName");

                    b.Property<string>("KkTyp")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("kk_typ")
                        .HasComment("rTyp");

                    b.Property<short?>("KzBvg")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_bvg")
                        .HasDefaultValueSql("0")
                        .HasComment("bvg");

                    b.Property<short?>("KzGebuehrenFrei")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_gebuehren_frei")
                        .HasDefaultValueSql("0")
                        .HasComment("gebFrei");

                    b.Property<short?>("KzNoctu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_noctu")
                        .HasDefaultValueSql("0")
                        .HasComment("noctu");

                    b.Property<short?>("KzSonstige")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_sonstige")
                        .HasDefaultValueSql("0")
                        .HasComment("sonstige");

                    b.Property<short?>("KzSprechstundenbedarf")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("kz_sprechstundenbedarf")
                        .HasDefaultValueSql("0")
                        .HasComment("sprStBedarf");

                    b.Property<int?>("Ppos1Faktor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ppos1_faktor")
                        .HasComment("pPosition1->faktor");

                    b.Property<long?>("Ppos1Pzn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ppos1_pzn")
                        .HasComment("pPosition1->pzn");

                    b.Property<decimal?>("Ppos1Taxe")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(11, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("ppos1_taxe")
                        .HasDefaultValueSql("0")
                        .HasComment("pPosition1->taxe");

                    b.Property<string>("RezeptTyp")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("rezept_typ")
                        .HasComment("Nur STANDARDREZEPT, BTM, SPRECHSTUNDENBEDARF");

                    b.Property<string>("RzDatum")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("rz_datum");

                    b.Property<DateTime?>("RzLieferDatum")
                        .HasColumnType("date")
                        .HasColumnName("rz_liefer_datum");

                    b.Property<string>("RzLieferId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("rz_liefer_id");

                    b.Property<TimeSpan?>("RzLieferZeit")
                        .HasColumnType("time without time zone")
                        .HasColumnName("rz_liefer_zeit");

                    b.Property<long?>("TransaktionsNummer")
                        .HasColumnType("INTEGER")
                        .HasColumnName("transaktions_nummer")
                        .HasComment("transaktionsNummer");

                    b.Property<DateTime?>("Verordnungsdatum")
                        .HasColumnType("date")
                        .HasColumnName("verordnungsdatum")
                        .HasComment("verDat - Ausstellungsdatum - Verordnungsdatum");

                    b.Property<DateTime?>("VersichertenGeburtsdatum")
                        .HasColumnType("date")
                        .HasColumnName("versicherten_geburtsdatum")
                        .HasComment("vGeb");

                    b.Property<string>("VersichertenNummer")
                        .HasMaxLength(12)
                        .HasColumnType("TEXT")
                        .HasColumnName("versicherten_nummer")
                        .HasComment("vrsNr");

                    b.Property<string>("VersichertenStatus")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("versicherten_status")
                        .HasComment("vStat");

                    b.Property<string>("VersichertenkarteGueltigBis")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("versichertenkarte_gueltig_bis")
                        .HasComment("vkGueltigBis");

                    b.Property<decimal?>("Zuzahlung")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(11, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("zuzahlung")
                        .HasDefaultValueSql("0");

                    b.HasKey("IdSenderezeptePrezept")
                        .HasName("er_senderezepte_prezept_pkey");

                    b.HasIndex("IdSenderezepteHeader");

                    b.HasIndex(new[] { "RzLieferId", "TransaktionsNummer" }, "idx_er_sendrez_prez_rz_liefer_id");

                    b.HasIndex(new[] { "TransaktionsNummer", "RzLieferId" }, "idx_er_sendrez_prez_transaktionsnummer");

                    b.ToTable("er_senderezepte_prezept", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezeptePrezeptDaten", b =>
                {
                    b.Property<int>("IdSenderezeptePrezeptDaten")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_prezept_daten");

                    b.Property<int?>("IdSenderezeptePrezept")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_prezept");

                    b.Property<string>("RezeptUuid")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("TEXT")
                        .HasColumnName("rezept_uuid")
                        .HasComment("Eindeutiger Rezept - Universal Unique Identifier (UUID)");

                    b.Property<bool?>("TransferArz")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("transfer_arz")
                        .HasDefaultValueSql("false")
                        .HasComment("Bestätigung vom ARZ - Transfer der Rezeptdaten erfolgt");

                    b.Property<string>("XmlRequest")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("xml_request")
                        .HasComment("Original XML-Request der Apotheke (nur Rezept-XML) - zur Weiterleitung ins ARZ");

                    b.HasKey("IdSenderezeptePrezeptDaten")
                        .HasName("er_senderezepte_prezept_daten_pkey");

                    b.HasIndex(new[] { "IdSenderezeptePrezept" }, "idx_er_sendrez_prez_daten_id");

                    b.ToTable("er_senderezepte_prezept_daten", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezeptePrezeptPcharge", b =>
                {
                    b.Property<int>("IdSenderezeptePrezeptPcharge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_prezept_pcharge")
                        .HasDefaultValueSql("nextval('daten.er_senderezepte_prezept_pchar_id_senderezepte_prezept_pchar_seq'::regclass)");

                    b.Property<short?>("AnzahlApplikationen")
                        .HasColumnType("INTEGER")
                        .HasColumnName("anzahl_applikationen")
                        .HasComment("anzahlApplikationen - Werte 1-99");

                    b.Property<short?>("ChargenNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("chargen_nr")
                        .HasComment("chargenNr - Werte 1-99");

                    b.Property<long?>("HerstellerNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hersteller_nr")
                        .HasComment("herstellerNr - IK der Apotheke");

                    b.Property<short?>("HerstellerSchluessel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hersteller_schluessel")
                        .HasComment("herstellerSchluessel - Werte 1|2|3|4");

                    b.Property<string>("HerstellungsDatum")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("herstellungs_datum")
                        .HasComment("herstellungsDatum Format 2011-08-19T11:37:04.000");

                    b.Property<int?>("IdSenderezeptePrezept")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_prezept");

                    b.HasKey("IdSenderezeptePrezeptPcharge")
                        .HasName("id_senderezepte_prez_pcharge_pkey");

                    b.HasIndex(new[] { "IdSenderezeptePrezept" }, "idx_er_sendrez_prez_pch_prezid");

                    b.ToTable("er_senderezepte_prezept_pcharge", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezeptePrezeptPchargePwirkstoff", b =>
                {
                    b.Property<int>("IdSenderezeptePrezeptPwirkstoff")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_prezept_pwirkstoff")
                        .HasDefaultValueSql("nextval('daten.er_senderezepte_prezept_pchar_id_senderezepte_prezept_pwirk_seq'::regclass)");

                    b.Property<int?>("Faktor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("faktor")
                        .HasComment("faktor");

                    b.Property<string>("FaktorKennzeichen")
                        .HasMaxLength(2)
                        .HasColumnType("TEXT")
                        .HasColumnName("faktor_kennzeichen")
                        .HasComment("faktorKennzeichen");

                    b.Property<int?>("IdSenderezeptePrezeptPcharge")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_prezept_pcharge");

                    b.Property<string>("Notiz")
                        .HasMaxLength(130)
                        .HasColumnType("TEXT")
                        .HasColumnName("notiz")
                        .HasComment("notiz");

                    b.Property<short?>("PPosNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("p_pos_nr")
                        .HasComment("pPosNr");

                    b.Property<string>("PreisKennzeichen")
                        .HasMaxLength(2)
                        .HasColumnType("TEXT")
                        .HasColumnName("preis_kennzeichen")
                        .HasComment("preisKennzeichen");

                    b.Property<long?>("Pzn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pzn")
                        .HasComment("pzn");

                    b.Property<decimal?>("Taxe")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(11, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("taxe")
                        .HasDefaultValueSql("0")
                        .HasComment("taxe");

                    b.Property<string>("WirkstoffName")
                        .HasMaxLength(130)
                        .HasColumnType("TEXT")
                        .HasColumnName("wirkstoff_name")
                        .HasComment("wirkstoffName");

                    b.HasKey("IdSenderezeptePrezeptPwirkstoff")
                        .HasName("er_senderezepte_prezept_pcharge_pwirkstoff_pkey");

                    b.HasIndex(new[] { "IdSenderezeptePrezeptPcharge" }, "idx_er_sendrez_prez_pch_pwirk_pchid");

                    b.ToTable("er_senderezepte_prezept_pcharge_pwirkstoff", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezeptePrezeptStatus", b =>
                {
                    b.Property<int>("IdSenderezeptePrezeptStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_prezept_status")
                        .HasDefaultValueSql("nextval('daten.er_senderezepte_prezept_statu_id_senderezepte_prezept_stat_seq1'::regclass)");

                    b.Property<string>("AbrechenStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("abrechen_status")
                        .HasDefaultValueSql("'VOR_PRUEFUNG'::character varying")
                        .HasComment("Interner Status - enthält immer das Prüfergebnis");

                    b.Property<int?>("IdSenderezeptePrezept")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_prezept");

                    b.Property<bool?>("RezeptCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("rezept_check")
                        .HasDefaultValueSql("false");

                    b.Property<string>("RezeptStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("rezept_status")
                        .HasDefaultValueSql("'VOR_PRUEFUNG'::character varying");

                    b.Property<string>("RzAbfrageId")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("rz_abfrage_id")
                        .HasComment("ID mit der alle DS gekennzeichnet sind die innerhalb einer RCS Abfrage gesendet wurden");

                    b.Property<DateTime?>("StatusAbfrageDatum")
                        .HasColumnType("date")
                        .HasColumnName("status_abfrage_datum")
                        .HasComment("Abfragedatum des Status zum Rezept");

                    b.Property<TimeSpan?>("StatusAbfrageZeit")
                        .HasColumnType("time without time zone")
                        .HasColumnName("status_abfrage_zeit")
                        .HasComment("Abfragezeit des Status zum Rezept");

                    b.Property<long?>("TransaktionsNummer")
                        .HasColumnType("INTEGER")
                        .HasColumnName("transaktions_nummer");

                    b.HasKey("IdSenderezeptePrezeptStatus")
                        .HasName("er_senderezepte_prezept_status_pkey");

                    b.HasIndex(new[] { "IdSenderezeptePrezept", "TransaktionsNummer", "RezeptStatus" }, "idx_er_sendrez_prez_stat_idrezprez");

                    b.ToTable("er_senderezepte_prezept_status", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezeptePrezeptStatusinfo", b =>
                {
                    b.Property<int>("IdSenderezeptePrezeptStatusinfo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_prezept_statusinfo")
                        .HasDefaultValueSql("nextval('daten.er_senderezepte_prezept_statu_id_senderezepte_prezept_statu_seq'::regclass)");

                    b.Property<string>("Fcode")
                        .HasMaxLength(4)
                        .HasColumnType("TEXT")
                        .HasColumnName("fcode");

                    b.Property<string>("Fkommentar")
                        .HasColumnType("TEXT")
                        .HasColumnName("fkommentar");

                    b.Property<string>("Fkurztext")
                        .HasColumnType("TEXT")
                        .HasColumnName("fkurztext");

                    b.Property<string>("Fstatus")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("fstatus");

                    b.Property<string>("Ftcode")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasColumnName("ftcode");

                    b.Property<int?>("IdSenderezeptePrezept")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_senderezepte_prezept");

                    b.Property<short?>("Posnr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("posnr");

                    b.Property<string>("RegelNr")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("regel_nr");

                    b.Property<string>("RegelTrefferCode")
                        .HasMaxLength(7)
                        .HasColumnType("TEXT")
                        .HasColumnName("regel_treffer_code");

                    b.HasKey("IdSenderezeptePrezeptStatusinfo")
                        .HasName("er_senderezepte_prezept_statusinfo_pkey");

                    b.HasIndex(new[] { "IdSenderezeptePrezept" }, "idx_er_sendrez_prez_stinfo_id");

                    b.ToTable("er_senderezepte_prezept_statusinfo", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSonderPzn", b =>
                {
                    b.Property<long>("IdSonderPzn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_sonder_pzn");

                    b.Property<string>("Beschreibung")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("beschreibung");

                    b.Property<string>("BeschreibungKurz")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("beschreibung_kurz");

                    b.Property<DateTime?>("GueltigAb")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_ab");

                    b.Property<DateTime?>("GueltigBis")
                        .HasColumnType("date")
                        .HasColumnName("gueltig_bis");

                    b.Property<string>("Kommentar")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("kommentar");

                    b.Property<long?>("SonderPzn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sonder_pzn");

                    b.Property<short?>("Ust")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ust");

                    b.HasKey("IdSonderPzn")
                        .HasName("er_sonder_pzn_temp_pkey");

                    b.HasIndex(new[] { "SonderPzn", "GueltigAb", "GueltigBis" }, "idx_er_sonder_pzn_sonderpzn_gueltigabbis_20191024");

                    b.ToTable("er_sonder_pzn", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErUsecase", b =>
                {
                    b.Property<int>("IdUsecase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_usecase");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("TEXT")
                        .HasColumnName("beschreibung");

                    b.Property<string>("Bezeichnung")
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasColumnName("bezeichnung");

                    b.Property<bool?>("Freigegeben")
                        .HasColumnType("INTEGER")
                        .HasColumnName("freigegeben")
                        .HasComment("Freigabe von AVC (Rechenzentrum)");

                    b.Property<bool?>("MainUc")
                        .HasColumnType("INTEGER")
                        .HasColumnName("main_uc");

                    b.Property<int?>("MainUcId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("main_uc_id")
                        .HasComment("wenn sub_uc - die id_usecase des Main UC");

                    b.Property<short>("MainUcNr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("main_uc_nr");

                    b.Property<string>("Option")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("option")
                        .HasComment("z.B. synchron oder asynchron");

                    b.Property<bool?>("SubUc")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sub_uc");

                    b.Property<short?>("SubUcNr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("sub_uc_nr")
                        .HasDefaultValueSql("0");

                    b.HasKey("IdUsecase")
                        .HasName("er_usecase_pkey");

                    b.HasIndex(new[] { "MainUcNr", "SubUcNr" }, "idx_uc_mucnr_sucnr");

                    b.ToTable("er_usecase", "daten");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErPrueferezeptEmuster16Artikel", b =>
                {
                    b.HasOne("ArzTiServer.Domain.Model.ErPrueferezeptEmuster16", "IdPrueferezeptEmuster16Navigation")
                        .WithMany("ErPrueferezeptEmuster16Artikels")
                        .HasForeignKey("IdPrueferezeptEmuster16")
                        .HasConstraintName("er_prueferezept_emuster16_artike_id_prueferezept_emuster16_fkey");

                    b.Navigation("IdPrueferezeptEmuster16Navigation");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErPrueferezeptEmuster16Status", b =>
                {
                    b.HasOne("ArzTiServer.Domain.Model.ErPrueferezeptEmuster16", "IdPrueferezeptEmuster16Navigation")
                        .WithMany("ErPrueferezeptEmuster16Statuses")
                        .HasForeignKey("IdPrueferezeptEmuster16")
                        .HasConstraintName("er_prueferezept_emuster16_status_id_prueferezept_emuster16");

                    b.Navigation("IdPrueferezeptEmuster16Navigation");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErPrueferezeptEmuster16Statusinfo", b =>
                {
                    b.HasOne("ArzTiServer.Domain.Model.ErPrueferezeptEmuster16", "IdPrueferezeptEmuster16Navigation")
                        .WithMany("ErPrueferezeptEmuster16Statusinfos")
                        .HasForeignKey("IdPrueferezeptEmuster16")
                        .HasConstraintName("er_prueferezept_emuster16_statusinfo_id_prueferezept_emuster16");

                    b.Navigation("IdPrueferezeptEmuster16Navigation");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErPrueferezeptErezeptLieferid", b =>
                {
                    b.HasOne("ArzTiServer.Domain.Model.ErPrueferezeptErezept", "IdPrueferezeptErezeptNavigation")
                        .WithMany("ErPrueferezeptErezeptLieferids")
                        .HasForeignKey("IdPrueferezeptErezept")
                        .HasConstraintName("er_prueferezept_erezept_lieferid_id_prueferezept_prezept")
                        .IsRequired();

                    b.HasOne("ArzTiServer.Domain.Model.ErPrueferezeptHeader", "IdPrueferezeptHeaderNavigation")
                        .WithMany("ErPrueferezeptErezeptLieferids")
                        .HasForeignKey("IdPrueferezeptHeader")
                        .HasConstraintName("er_prueferezept_erezept_lieferid_id_prueferezept_header")
                        .IsRequired();

                    b.Navigation("IdPrueferezeptErezeptNavigation");

                    b.Navigation("IdPrueferezeptHeaderNavigation");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErPrueferezeptErezeptStatusinfo", b =>
                {
                    b.HasOne("ArzTiServer.Domain.Model.ErPrueferezeptErezept", "IdPrueferezeptErezeptNavigation")
                        .WithMany("ErPrueferezeptErezeptStatusinfos")
                        .HasForeignKey("IdPrueferezeptErezept")
                        .HasConstraintName("er_prueferezept_erezept_statusinfo_id_prueferezept_erezept");

                    b.Navigation("IdPrueferezeptErezeptNavigation");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSecAccessFiverx", b =>
                {
                    b.HasOne("ArzTiServer.Domain.Model.ErApotheke", "IdApothekeNavigation")
                        .WithMany("ErSecAccessFiverxes")
                        .HasForeignKey("IdApotheke")
                        .HasConstraintName("er_sec_access_fiverx_id_apotheke_fkey")
                        .IsRequired();

                    b.Navigation("IdApothekeNavigation");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteEmuster16", b =>
                {
                    b.HasOne("ArzTiServer.Domain.Model.ErSenderezepteHeader", "IdSenderezepteHeaderNavigation")
                        .WithMany("ErSenderezepteEmuster16s")
                        .HasForeignKey("IdSenderezepteHeader")
                        .HasConstraintName("er_senderezepte_emuster16_id_senderezepte_header")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdSenderezepteHeaderNavigation");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteEmuster16Artikel", b =>
                {
                    b.HasOne("ArzTiServer.Domain.Model.ErSenderezepteEmuster16", "IdSenderezepteEmuster16Navigation")
                        .WithMany("ErSenderezepteEmuster16Artikels")
                        .HasForeignKey("IdSenderezepteEmuster16")
                        .HasConstraintName("er_senderezepte_emuster16_artike_id_senderezepte_emuster16_fkey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdSenderezepteEmuster16Navigation");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteEmuster16Daten", b =>
                {
                    b.HasOne("ArzTiServer.Domain.Model.ErSenderezepteEmuster16", "IdSenderezepteEmuster16Navigation")
                        .WithMany("ErSenderezepteEmuster16Datens")
                        .HasForeignKey("IdSenderezepteEmuster16")
                        .HasConstraintName("er_senderezepte_emuster16_daten_id_senderezepte_emuster16")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdSenderezepteEmuster16Navigation");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteEmuster16Status", b =>
                {
                    b.HasOne("ArzTiServer.Domain.Model.ErSenderezepteEmuster16", "IdSenderezepteEmuster16Navigation")
                        .WithMany("ErSenderezepteEmuster16Statuses")
                        .HasForeignKey("IdSenderezepteEmuster16")
                        .HasConstraintName("er_senderezepte_emuster16_status_id_senderezepte_emuster16")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdSenderezepteEmuster16Navigation");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteEmuster16Statusinfo", b =>
                {
                    b.HasOne("ArzTiServer.Domain.Model.ErSenderezepteEmuster16", "IdSenderezepteEmuster16Navigation")
                        .WithMany("ErSenderezepteEmuster16Statusinfos")
                        .HasForeignKey("IdSenderezepteEmuster16")
                        .HasConstraintName("er_senderezepte_emuster16_statusinfo_id_senderezepte_emuster16")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdSenderezepteEmuster16Navigation");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteErezept", b =>
                {
                    b.HasOne("ArzTiServer.Domain.Model.ErSenderezepteHeader", "IdSenderezepteHeaderNavigation")
                        .WithMany("ErSenderezepteErezepts")
                        .HasForeignKey("IdSenderezepteHeader")
                        .HasConstraintName("er_senderezepte_erezept_id_senderezepte_header")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdSenderezepteHeaderNavigation");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteErezeptDaten", b =>
                {
                    b.HasOne("ArzTiServer.Domain.Model.ErSenderezepteErezept", "IdSenderezepteErezeptNavigation")
                        .WithMany("ErSenderezepteErezeptDatens")
                        .HasForeignKey("IdSenderezepteErezept")
                        .HasConstraintName("er_senderezepte_erezept_daten_id_senderezepte_erezept")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdSenderezepteErezeptNavigation");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteErezeptStatus", b =>
                {
                    b.HasOne("ArzTiServer.Domain.Model.ErSenderezepteErezept", "IdSenderezepteErezeptNavigation")
                        .WithMany("ErSenderezepteErezeptStatuses")
                        .HasForeignKey("IdSenderezepteErezept")
                        .HasConstraintName("er_senderezepte_erezept_status_id_senderezepte_erezept")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdSenderezepteErezeptNavigation");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteErezeptStatusinfo", b =>
                {
                    b.HasOne("ArzTiServer.Domain.Model.ErSenderezepteErezept", "IdSenderezepteErezeptNavigation")
                        .WithMany("ErSenderezepteErezeptStatusinfos")
                        .HasForeignKey("IdSenderezepteErezept")
                        .HasConstraintName("er_senderezepte_erezept_statusinfo_id_senderezepte_erezept")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdSenderezepteErezeptNavigation");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteHeaderDaten", b =>
                {
                    b.HasOne("ArzTiServer.Domain.Model.ErSenderezepteHeader", "IdSenderezepteHeaderNavigation")
                        .WithMany("ErSenderezepteHeaderDatens")
                        .HasForeignKey("IdSenderezepteHeader")
                        .HasConstraintName("er_senderezepte_header_daten_id_senderezepte_header")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdSenderezepteHeaderNavigation");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezeptePrezept", b =>
                {
                    b.HasOne("ArzTiServer.Domain.Model.ErSenderezepteHeader", "IdSenderezepteHeaderNavigation")
                        .WithMany("ErSenderezeptePrezepts")
                        .HasForeignKey("IdSenderezepteHeader")
                        .HasConstraintName("er_senderezepte_prezept_id_senderezepte_header")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdSenderezepteHeaderNavigation");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezeptePrezeptDaten", b =>
                {
                    b.HasOne("ArzTiServer.Domain.Model.ErSenderezeptePrezept", "IdSenderezeptePrezeptNavigation")
                        .WithMany("ErSenderezeptePrezeptDatens")
                        .HasForeignKey("IdSenderezeptePrezept")
                        .HasConstraintName("er_senderezepte_prezept_daten_id_senderezepte_prezept")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdSenderezeptePrezeptNavigation");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezeptePrezeptPcharge", b =>
                {
                    b.HasOne("ArzTiServer.Domain.Model.ErSenderezeptePrezept", "IdSenderezeptePrezeptNavigation")
                        .WithMany("ErSenderezeptePrezeptPcharges")
                        .HasForeignKey("IdSenderezeptePrezept")
                        .HasConstraintName("er_senderezepte_prezept_pcharge_id_srez_prez_fkey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdSenderezeptePrezeptNavigation");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezeptePrezeptPchargePwirkstoff", b =>
                {
                    b.HasOne("ArzTiServer.Domain.Model.ErSenderezeptePrezeptPcharge", "IdSenderezeptePrezeptPchargeNavigation")
                        .WithMany("ErSenderezeptePrezeptPchargePwirkstoffs")
                        .HasForeignKey("IdSenderezeptePrezeptPcharge")
                        .HasConstraintName("er_senderezepte_prez_pcharge_pwirk_id_senderezepte_prez_pch_fke")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdSenderezeptePrezeptPchargeNavigation");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezeptePrezeptStatus", b =>
                {
                    b.HasOne("ArzTiServer.Domain.Model.ErSenderezeptePrezept", "IdSenderezeptePrezeptNavigation")
                        .WithMany("ErSenderezeptePrezeptStatuses")
                        .HasForeignKey("IdSenderezeptePrezept")
                        .HasConstraintName("er_senderezepte_prezept_status_id_senderezepte_prezept")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdSenderezeptePrezeptNavigation");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezeptePrezeptStatusinfo", b =>
                {
                    b.HasOne("ArzTiServer.Domain.Model.ErSenderezeptePrezept", "IdSenderezeptePrezeptNavigation")
                        .WithMany("ErSenderezeptePrezeptStatusinfos")
                        .HasForeignKey("IdSenderezeptePrezept")
                        .HasConstraintName("er_senderezepte_prezept_statusinfo_id_senderezepte_prezept")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdSenderezeptePrezeptNavigation");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErApotheke", b =>
                {
                    b.Navigation("ErSecAccessFiverxes");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErPrueferezeptEmuster16", b =>
                {
                    b.Navigation("ErPrueferezeptEmuster16Artikels");

                    b.Navigation("ErPrueferezeptEmuster16Statuses");

                    b.Navigation("ErPrueferezeptEmuster16Statusinfos");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErPrueferezeptErezept", b =>
                {
                    b.Navigation("ErPrueferezeptErezeptLieferids");

                    b.Navigation("ErPrueferezeptErezeptStatusinfos");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErPrueferezeptHeader", b =>
                {
                    b.Navigation("ErPrueferezeptErezeptLieferids");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteEmuster16", b =>
                {
                    b.Navigation("ErSenderezepteEmuster16Artikels");

                    b.Navigation("ErSenderezepteEmuster16Datens");

                    b.Navigation("ErSenderezepteEmuster16Statuses");

                    b.Navigation("ErSenderezepteEmuster16Statusinfos");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteErezept", b =>
                {
                    b.Navigation("ErSenderezepteErezeptDatens");

                    b.Navigation("ErSenderezepteErezeptStatuses");

                    b.Navigation("ErSenderezepteErezeptStatusinfos");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezepteHeader", b =>
                {
                    b.Navigation("ErSenderezepteEmuster16s");

                    b.Navigation("ErSenderezepteErezepts");

                    b.Navigation("ErSenderezepteHeaderDatens");

                    b.Navigation("ErSenderezeptePrezepts");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezeptePrezept", b =>
                {
                    b.Navigation("ErSenderezeptePrezeptDatens");

                    b.Navigation("ErSenderezeptePrezeptPcharges");

                    b.Navigation("ErSenderezeptePrezeptStatuses");

                    b.Navigation("ErSenderezeptePrezeptStatusinfos");
                });

            modelBuilder.Entity("ArzTiServer.Domain.Model.ErSenderezeptePrezeptPcharge", b =>
                {
                    b.Navigation("ErSenderezeptePrezeptPchargePwirkstoffs");
                });
#pragma warning restore 612, 618
        }
    }
}
