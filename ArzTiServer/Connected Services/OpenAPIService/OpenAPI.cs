//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.11.1.0 (NJsonSchema v10.4.3.0 (Newtonsoft.Json v12.0.0.2)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace ArzTiServer.OpenAPIService
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.1.0 (NJsonSchema v10.4.3.0 (Newtonsoft.Json v12.0.0.2))")]
    public interface IController
    {
        /// <summary>liefert eine Liste von Rezepten  einer Apotheke</summary>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="maxnum">maximale Anzahl der Rezepte, die zurückgegeben werden</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM</param>
        /// <returns>Liefert eine Liste mit den gefundenen Rezepten.</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Rezept>> GetRezeptIdListAsync(string apoik, RezeptTyp? reztyp, int? maxnum, string zeitraum);
    
        /// <summary>Abfrage aller neuen Rezepte einer Apotheke</summary>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM</param>
        /// <returns>Liefert eine Liste der Status aller Rezepte</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RezeptStatus>> GetRezeptIdListByTransferAsync(string apoik, RezeptTyp? reztyp, string zeitraum);
    
        /// <summary>Statusabfrage aller Rezepte einer Apotheke</summary>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM</param>
        /// <returns>Liefert eine Liste der Status aller Rezepte</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RezeptStatus>> GetRezeptIdListByStatusAsync(string apoik, RezeptTyp? reztyp, string zeitraum);
    
        /// <summary>Änderung des Abholstatus einer Liste von Rezepten</summary>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <returns>Returns the newly created item</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Abholstatus>> PutRezeptIdListAbholstatusAsync(string apoik, System.Collections.Generic.IEnumerable<Abholstatus> body);
    
        /// <summary>prüft eine Liste von Rezepten</summary>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="body">user to add to the system</param>
        /// <returns>Liefert das Rezept für die ID</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RezeptPruefRes>> PutRezeptIdListPruefungAsync(string apoik, System.Collections.Generic.IEnumerable<RezeptId> body);
    
        /// <summary>liefert ein Rezept</summary>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die RezeptID.</param>
        /// <returns>Liefert das Rezept für die ID</returns>
        System.Threading.Tasks.Task<Rezept> GetRezeptIdAsync(string apoik, RezeptTyp reztyp, string rezid);
    
        /// <summary>löscht ein Rezept</summary>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die RezeptID.</param>
        /// <returns>Liefert das Rezept für die ID</returns>
        System.Threading.Tasks.Task<Rezept> DeleteRezeptIdAsync(string apoik, RezeptTyp reztyp, string rezid);
    
        /// <summary>Statusänderung eines Rezeptes</summary>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die Rezept-ID.</param>
        /// <returns>Liefert den Status des Rezeptes für die ID</returns>
        System.Threading.Tasks.Task<Rezept> PatchRezeptIdStatusAsync(string apoik, RezeptTyp reztyp, string rezid, RezeptStatus body);
    
        /// <summary>Statusabfrage eines Rezeptes</summary>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die Rezept-ID.</param>
        /// <returns>Liefert den Status des Rezeptes für die ID</returns>
        System.Threading.Tasks.Task<Rezept> GetRezeptIdStatusAsync(string apoik, RezeptTyp reztyp, string rezid);
    
        /// <summary>liefert ein Rezept</summary>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <returns>Liefert das gefundene Rezepte.</returns>
        System.Threading.Tasks.Task<Rezept> GetRezeptUIdAsync(string ruid);
    
        /// <summary>löscht ein Rezept</summary>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <returns>Liefert das Rezept für die ID</returns>
        System.Threading.Tasks.Task<Rezept> DeleteRezeptUIdAsync(string ruid);
    
        /// <summary>Statusänderung eines Rezeptes</summary>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <returns>Liefert den Status des Rezeptes für die ID</returns>
        System.Threading.Tasks.Task<Rezept> PatchRezeptUIdStatusAsync(string ruid, RezeptStatusUId body);
    
        /// <summary>Änderung des Abholstatus einer Liste von Rezepten</summary>
        /// <returns>Returns the newly created item</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AbholstatusUID>> PutRezeptUIdListAbholstatusAsync(System.Collections.Generic.IEnumerable<AbholstatusUID> body);
    
        /// <summary>prüft eine Liste von UUID Rezepten</summary>
        /// <param name="body">optionaler Datensatz</param>
        /// <returns>Liefert die Liste der Prüfergebnisse</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RezeptPruefResUId>> PutRezeptUidListPruefungAsync(System.Collections.Generic.IEnumerable<RezeptUId> body);
    
        /// <summary>liefert eine Liste aller Apotheken</summary>
        /// <returns>Liefert eine Liste mit den gefundenen Rezepten.</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Apotheke>> GetApothekenListAsync();
    
        /// <summary>liefert Details einer Apotheke</summary>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <returns>liefert Details einer Apotheke.</returns>
        System.Threading.Tasks.Task<Apotheke> GetApothekeByIKAsync(string apoik);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.1.0 (NJsonSchema v10.4.3.0 (Newtonsoft.Json v12.0.0.2))")]
    [Microsoft.AspNetCore.Mvc.Route("v1")]
    public partial class Controller : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IController _implementation;
    
        public Controller(IController implementation)
        {
            _implementation = implementation;
        }
    
        /// <summary>liefert eine Liste von Rezepten  einer Apotheke</summary>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="maxnum">maximale Anzahl der Rezepte, die zurückgegeben werden</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM</param>
        /// <returns>Liefert eine Liste mit den gefundenen Rezepten.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("apotheke/{apoik}/rezept")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Rezept>> GetRezeptIdList(string apoik, [Microsoft.AspNetCore.Mvc.FromQuery] RezeptTyp? reztyp, [Microsoft.AspNetCore.Mvc.FromQuery] int? maxnum, [Microsoft.AspNetCore.Mvc.FromQuery] string zeitraum)
        {
            return _implementation.GetRezeptIdListAsync(apoik, reztyp, maxnum, zeitraum);
        }
    
        /// <summary>Abfrage aller neuen Rezepte einer Apotheke</summary>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM</param>
        /// <returns>Liefert eine Liste der Status aller Rezepte</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("apotheke/{apoik}/rezept/neu")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RezeptStatus>> GetRezeptIdListByTransfer(string apoik, [Microsoft.AspNetCore.Mvc.FromQuery] RezeptTyp? reztyp, [Microsoft.AspNetCore.Mvc.FromQuery] string zeitraum)
        {
            return _implementation.GetRezeptIdListByTransferAsync(apoik, reztyp, zeitraum);
        }
    
        /// <summary>Statusabfrage aller Rezepte einer Apotheke</summary>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM</param>
        /// <returns>Liefert eine Liste der Status aller Rezepte</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("apotheke/{apoik}/rezept/status")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RezeptStatus>> GetRezeptIdListByStatus(string apoik, [Microsoft.AspNetCore.Mvc.FromQuery] RezeptTyp? reztyp, [Microsoft.AspNetCore.Mvc.FromQuery] string zeitraum)
        {
            return _implementation.GetRezeptIdListByStatusAsync(apoik, reztyp, zeitraum);
        }
    
        /// <summary>Änderung des Abholstatus einer Liste von Rezepten</summary>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <returns>Returns the newly created item</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("apotheke/{apoik}/rezept/abholung")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Abholstatus>> PutRezeptIdListAbholstatus(string apoik, [Microsoft.AspNetCore.Mvc.FromBody] System.Collections.Generic.IEnumerable<Abholstatus> body)
        {
            return _implementation.PutRezeptIdListAbholstatusAsync(apoik, body);
        }
    
        /// <summary>prüft eine Liste von Rezepten</summary>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="body">user to add to the system</param>
        /// <returns>Liefert das Rezept für die ID</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("apotheke/{apoik}/rezept/pruefung")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RezeptPruefRes>> PutRezeptIdListPruefung(string apoik, [Microsoft.AspNetCore.Mvc.FromBody] System.Collections.Generic.IEnumerable<RezeptId> body)
        {
            return _implementation.PutRezeptIdListPruefungAsync(apoik, body);
        }
    
        /// <summary>liefert ein Rezept</summary>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die RezeptID.</param>
        /// <returns>Liefert das Rezept für die ID</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("apotheke/{apoik}/rezept/{reztyp}/{rezid}")]
        public System.Threading.Tasks.Task<Rezept> GetRezeptId(string apoik, RezeptTyp reztyp, string rezid)
        {
            return _implementation.GetRezeptIdAsync(apoik, reztyp, rezid);
        }
    
        /// <summary>löscht ein Rezept</summary>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die RezeptID.</param>
        /// <returns>Liefert das Rezept für die ID</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("apotheke/{apoik}/rezept/{reztyp}/{rezid}")]
        public System.Threading.Tasks.Task<Rezept> DeleteRezeptId(string apoik, RezeptTyp reztyp, string rezid)
        {
            return _implementation.DeleteRezeptIdAsync(apoik, reztyp, rezid);
        }
    
        /// <summary>Statusänderung eines Rezeptes</summary>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die Rezept-ID.</param>
        /// <returns>Liefert den Status des Rezeptes für die ID</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("apotheke/{apoik}/rezept/{reztyp}/{rezid}")]
        public System.Threading.Tasks.Task<Rezept> PatchRezeptIdStatus(string apoik, RezeptTyp reztyp, string rezid, [Microsoft.AspNetCore.Mvc.FromBody] RezeptStatus body)
        {
            return _implementation.PatchRezeptIdStatusAsync(apoik, reztyp, rezid, body);
        }
    
        /// <summary>Statusabfrage eines Rezeptes</summary>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die Rezept-ID.</param>
        /// <returns>Liefert den Status des Rezeptes für die ID</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("apotheke/{apoik}/rezept/{reztyp}/{rezid}/status")]
        public System.Threading.Tasks.Task<Rezept> GetRezeptIdStatus(string apoik, RezeptTyp reztyp, string rezid)
        {
            return _implementation.GetRezeptIdStatusAsync(apoik, reztyp, rezid);
        }
    
        /// <summary>liefert ein Rezept</summary>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <returns>Liefert das gefundene Rezepte.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rezept/{ruid}")]
        public System.Threading.Tasks.Task<Rezept> GetRezeptUId(string ruid)
        {
            return _implementation.GetRezeptUIdAsync(ruid);
        }
    
        /// <summary>löscht ein Rezept</summary>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <returns>Liefert das Rezept für die ID</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("rezept/{ruid}")]
        public System.Threading.Tasks.Task<Rezept> DeleteRezeptUId(string ruid)
        {
            return _implementation.DeleteRezeptUIdAsync(ruid);
        }
    
        /// <summary>Statusänderung eines Rezeptes</summary>
        /// <param name="ruid">Die Rezept UID.</param>
        /// <returns>Liefert den Status des Rezeptes für die ID</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("rezept/{ruid}")]
        public System.Threading.Tasks.Task<Rezept> PatchRezeptUIdStatus(string ruid, [Microsoft.AspNetCore.Mvc.FromBody] RezeptStatusUId body)
        {
            return _implementation.PatchRezeptUIdStatusAsync(ruid, body);
        }
    
        /// <summary>Änderung des Abholstatus einer Liste von Rezepten</summary>
        /// <returns>Returns the newly created item</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("rezept/abholung")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AbholstatusUID>> PutRezeptUIdListAbholstatus([Microsoft.AspNetCore.Mvc.FromBody] System.Collections.Generic.IEnumerable<AbholstatusUID> body)
        {
            return _implementation.PutRezeptUIdListAbholstatusAsync(body);
        }
    
        /// <summary>prüft eine Liste von UUID Rezepten</summary>
        /// <param name="body">optionaler Datensatz</param>
        /// <returns>Liefert die Liste der Prüfergebnisse</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("rezept/pruefung")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RezeptPruefResUId>> PutRezeptUidListPruefung([Microsoft.AspNetCore.Mvc.FromBody] System.Collections.Generic.IEnumerable<RezeptUId> body)
        {
            return _implementation.PutRezeptUidListPruefungAsync(body);
        }
    
        /// <summary>liefert eine Liste aller Apotheken</summary>
        /// <returns>Liefert eine Liste mit den gefundenen Rezepten.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("apotheke")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Apotheke>> GetApothekenList()
        {
            return _implementation.GetApothekenListAsync();
        }
    
        /// <summary>liefert Details einer Apotheke</summary>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <returns>liefert Details einer Apotheke.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("apotheke/{apoik}")]
        public System.Threading.Tasks.Task<Apotheke> GetApothekeByIK(string apoik)
        {
            return _implementation.GetApothekeByIKAsync(apoik);
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RezeptPruefRes 
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RezeptStatus Status { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RezeptPruefResUId 
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RezeptStatusUId Status { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RezeptStatus 
    {
        /// <summary>ID des Rezepts</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("typ", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RezeptTyp Typ { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusM", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MRezeptStatus StatusM { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ERezeptStatus StatusE { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RezeptStatusUId 
    {
        /// <summary>UUID des Rezepts</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("typ", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RezeptTyp Typ { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusM", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MRezeptStatus StatusM { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ERezeptStatus StatusE { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Der Status des eMuster16</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum MRezeptStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"VOR_PRUEFUNG")]
        VOR_PRUEFUNG = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FEHLER")]
        FEHLER = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VERBESSERBAR")]
        VERBESSERBAR = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ABRECHENBAR")]
        ABRECHENBAR = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HINWEIS")]
        HINWEIS = 4,
    
    }
    
    /// <summary>Der Statuswert des E-Rezeptes</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ERezeptStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"VOR_PRUEFUNG")]
        VOR_PRUEFUNG = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VOR_ABRECHNUNG")]
        VOR_ABRECHNUNG = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FEHLER")]
        FEHLER = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VERBESSERBAR  ")]
        VERBESSERBAR__ = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RUECKWEISUNG")]
        RUECKWEISUNG = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ABGERECHNET")]
        ABGERECHNET = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STORNIERT")]
        STORNIERT = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HINWEIS")]
        HINWEIS = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ABRECHENBAR")]
        ABRECHENBAR = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum RezeptTyp
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ERezept")]
        ERezept = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MRezept")]
        MRezept = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRezept")]
        PRezept = 2,
    
    }
    
    /// <summary>base64 codierte Leistung</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Rezept 
    {
        [Newtonsoft.Json.JsonProperty("typ", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RezeptTyp Typ { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>die Rezept ID</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RezeptId 
    {
        [Newtonsoft.Json.JsonProperty("typ", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RezeptTyp Typ { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>die Rezept RUID</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RezeptUId 
    {
        [Newtonsoft.Json.JsonProperty("ruid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ruid { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Abholstatus 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("typ", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RezeptTyp Typ { get; set; }
    
        [Newtonsoft.Json.JsonProperty("abgeholt", Required = Newtonsoft.Json.Required.Always)]
        public bool Abgeholt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AbholstatusUID 
    {
        [Newtonsoft.Json.JsonProperty("ruid", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ruid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("abgeholt", Required = Newtonsoft.Json.Required.Always)]
        public bool Abgeholt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Apotheke 
    {
        [Newtonsoft.Json.JsonProperty("ik", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ik { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Error 
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108