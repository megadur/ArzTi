/*
 * Webservice ArzTI API
 *
 * Kommunikation des Webservers mit den jeweiligen Rechenzentren * UC: Abruf der eRezept-Daten - neue (noch nicht gesendete) | eRezept-ID | Zeitraum * UC: Abruf der eMuster16-Daten - neue (noch nicht gesendete) | eRezept-ID | Zeitraum * UC: Abruf der pRezept-Daten - neue (noch nicht gesendete) | eRezept-ID | Zeitraum * UC: Aktualisierung des eRezept-Status - eRezept-ID * UC: Löschen eines eRezepts - eRezept-ID * UC: Aktualisierung von Kundendaten (Apotheke -> Rechenzentrum Zuordnung) - Apotheke-IK * UC: ... 
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using ArzTiServer.Attributes;
using ArzTiServer.Security;
using ArzTiServer.Models;
namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class RezeptListApiController : ControllerBase
    {
        /// <summary>
        /// liefert eine Liste von Rezepten  einer Apotheke
        /// </summary>
        /// <remarks>getRezeptIdList: Für die angegebene ApoIK werden alle Rezepte zurückgegeben.     Optional kann ein Rezepttyp angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Optional kann ein Zeitraum in der Form yyyy-mm angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Es werden solange neue Datensätze zurückgegenben, bis keine neuen mehr vorhanden sind.</remarks>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="maxnum">maximale Anzahl der Rezepte, die zurückgegeben werden</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM</param>
        /// <param name="status">Status values that need to be considered for filter</param>
        /// <response code="200">Liefert eine Liste mit den gefundenen Rezepten.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v1/apotheke/{apoik}/rezept")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetRezeptIdList")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Rezept>), description: "Liefert eine Liste mit den gefundenen Rezepten.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found")]
        public virtual IActionResult GetRezeptIdList([FromRoute][Required] string apoik, [FromQuery] RezeptTyp reztyp, [FromQuery] int? maxnum, [FromQuery] string zeitraum, [FromQuery] List<string> status)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Rezept>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"uid\" : {\n    \"ruid\" : \"ruid\"\n  },\n  \"data\" : \"data\",\n  \"apoik\" : \"apoik\",\n  \"id\" : {\n    \"typ\" : \"ERezept\",\n    \"id\" : \"id\"\n  },\n  \"status\" : \"status\"\n}, {\n  \"uid\" : {\n    \"ruid\" : \"ruid\"\n  },\n  \"data\" : \"data\",\n  \"apoik\" : \"apoik\",\n  \"id\" : {\n    \"typ\" : \"ERezept\",\n    \"id\" : \"id\"\n  },\n  \"status\" : \"status\"\n} ]";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Rezept>>(exampleJson)
            : default(List<Rezept>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Abfrage aller neuen Rezepte einer Apotheke
        /// </summary>
        /// <remarks>Für die angegebene ApoIK werden alle Rezepte zurückgegeben, die noch nicht abgeholt wurden.      Optional kann ein Zeitraum in der Form yyyy-mm angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Es werden solange neue Datensätze zurückgegenben, bis keine neuen mehr vorhanden sind.</remarks>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM</param>
        /// <response code="200">Liefert eine Liste der Status aller Rezepte</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v1/apotheke/{apoik}/rezept/abholung")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetRezeptIdListAbholstatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Rezept>), description: "Liefert eine Liste der Status aller Rezepte")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found")]
        public virtual IActionResult GetRezeptIdListAbholstatus([FromRoute][Required] string apoik, [FromQuery] RezeptTyp reztyp, [FromQuery] string zeitraum)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Rezept>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"uid\" : {\n    \"ruid\" : \"ruid\"\n  },\n  \"data\" : \"data\",\n  \"apoik\" : \"apoik\",\n  \"id\" : {\n    \"typ\" : \"ERezept\",\n    \"id\" : \"id\"\n  },\n  \"status\" : \"status\"\n}, {\n  \"uid\" : {\n    \"ruid\" : \"ruid\"\n  },\n  \"data\" : \"data\",\n  \"apoik\" : \"apoik\",\n  \"id\" : {\n    \"typ\" : \"ERezept\",\n    \"id\" : \"id\"\n  },\n  \"status\" : \"status\"\n} ]";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Rezept>>(exampleJson)
            : default(List<Rezept>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Ergebnisabfrage zur Vorprüfung aller Rezepte einer Apotheke
        /// </summary>
        /// <remarks>getRezeptIdListPruefRes</remarks>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM</param>
        /// <param name="status">Status values that need to be considered for filter</param>
        /// <response code="200">Liefert eine Liste der Status aller Rezepte</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v1/apotheke/{apoik}/rezept/pruefung")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetRezeptIdListPruefRes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<RezeptPruefResult>), description: "Liefert eine Liste der Status aller Rezepte")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found")]
        public virtual IActionResult GetRezeptIdListPruefRes([FromRoute][Required] string apoik, [FromQuery] RezeptTyp reztyp, [FromQuery] string zeitraum, [FromQuery] List<string> status)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<RezeptPruefResult>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"uid\" : {\n    \"ruid\" : \"ruid\"\n  },\n  \"statusinfo\" : [ {\n    \"fstatus\" : \"fstatus\",\n    \"ftcode\" : \"ftcode\",\n    \"fkurztext\" : \"fkurztext\",\n    \"posnr\" : \"posnr\",\n    \"fkommentar\" : \"fkommentar\",\n    \"fcode\" : \"fcode\"\n  }, {\n    \"fstatus\" : \"fstatus\",\n    \"ftcode\" : \"ftcode\",\n    \"fkurztext\" : \"fkurztext\",\n    \"posnr\" : \"posnr\",\n    \"fkommentar\" : \"fkommentar\",\n    \"fcode\" : \"fcode\"\n  } ],\n  \"id\" : {\n    \"typ\" : \"ERezept\",\n    \"id\" : \"id\"\n  }\n}, {\n  \"uid\" : {\n    \"ruid\" : \"ruid\"\n  },\n  \"statusinfo\" : [ {\n    \"fstatus\" : \"fstatus\",\n    \"ftcode\" : \"ftcode\",\n    \"fkurztext\" : \"fkurztext\",\n    \"posnr\" : \"posnr\",\n    \"fkommentar\" : \"fkommentar\",\n    \"fcode\" : \"fcode\"\n  }, {\n    \"fstatus\" : \"fstatus\",\n    \"ftcode\" : \"ftcode\",\n    \"fkurztext\" : \"fkurztext\",\n    \"posnr\" : \"posnr\",\n    \"fkommentar\" : \"fkommentar\",\n    \"fcode\" : \"fcode\"\n  } ],\n  \"id\" : {\n    \"typ\" : \"ERezept\",\n    \"id\" : \"id\"\n  }\n} ]";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<RezeptPruefResult>>(exampleJson)
            : default(List<RezeptPruefResult>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Statusabfrage aller Rezepte einer Apotheke
        /// </summary>
        /// <remarks>getRezeptIdStatusList</remarks>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM</param>
        /// <response code="200">Liefert eine Liste der Status aller Rezepte</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v1/apotheke/{apoik}/rezept/status")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetRezeptIdStatusList")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<RezeptStatus>), description: "Liefert eine Liste der Status aller Rezepte")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found")]
        public virtual IActionResult GetRezeptIdStatusList([FromRoute][Required] string apoik, [FromQuery] RezeptTyp reztyp, [FromQuery] string zeitraum)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<RezeptStatus>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"uid\" : {\n    \"ruid\" : \"ruid\"\n  },\n  \"id\" : {\n    \"typ\" : \"ERezept\",\n    \"id\" : \"id\"\n  },\n  \"status\" : \"status\"\n}, {\n  \"uid\" : {\n    \"ruid\" : \"ruid\"\n  },\n  \"id\" : {\n    \"typ\" : \"ERezept\",\n    \"id\" : \"id\"\n  },\n  \"status\" : \"status\"\n} ]";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<RezeptStatus>>(exampleJson)
            : default(List<RezeptStatus>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
