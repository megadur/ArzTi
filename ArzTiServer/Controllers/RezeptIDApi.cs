/*
 * Webservice ArzTI API
 *
 * Kommunikation des Webservers mit den jeweiligen Rechenzentren V.2021-05-20            
 *
 * The version of the OpenAPI document: V1
 * 
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using ArzTiServer.Attributes;
using ArzTiServer.Models;
namespace ArzTiServer.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class RezeptIDApiController : ControllerBase
    { 
        /// <summary>
        /// l�scht ein Rezept
        /// </summary>
        /// <remarks>deleteRezeptId</remarks>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die RezeptID.</param>
        /// <response code="200">Liefert das Rezept f�r die ID</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpDelete]
        [Route("/v1/apotheke/{apoik}/rezept/{reztyp}/{rezid}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteRezeptId")]
        [SwaggerResponse(statusCode: 200, type: typeof(Rezept), description: "Liefert das Rezept f�r die ID")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found")]
        public abstract Task<IActionResult> DeleteRezeptId([FromRoute (Name = "apoik")][Required]string apoik, [FromRoute (Name = "reztyp")][Required]RezeptTyp reztyp, [FromRoute (Name = "rezid")][Required]string rezid);
        /// <summary>
        /// liefert ein Rezept
        /// </summary>
        /// <remarks>getRezeptId</remarks>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die RezeptID.</param>
        /// <response code="200">Liefert das Rezept f�r die ID</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v1/apotheke/{apoik}/rezept/{reztyp}/{rezid}")]
        [ValidateModelState]
        [SwaggerOperation("GetRezeptId")]
        [SwaggerResponse(statusCode: 200, type: typeof(Rezept), description: "Liefert das Rezept f�r die ID")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found")]
        public abstract Task<IActionResult> GetRezeptId([FromRoute (Name = "apoik")][Required]string apoik, [FromRoute (Name = "reztyp")][Required]RezeptTyp reztyp, [FromRoute (Name = "rezid")][Required]string rezid);
        /// <summary>
        /// Statusabfrage eines Rezeptes
        /// </summary>
        /// <remarks>getRezeptIdStatus</remarks>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die Rezept-ID.</param>
        /// <response code="200">Liefert den Status des Rezeptes f�r die ID</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v1/apotheke/{apoik}/rezept/{reztyp}/{rezid}/status")]
        [ValidateModelState]
        [SwaggerOperation("GetRezeptIdStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(Rezept), description: "Liefert den Status des Rezeptes f�r die ID")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found")]
        public abstract Task<IActionResult> GetRezeptIdStatus([FromRoute (Name = "apoik")][Required]string apoik, [FromRoute (Name = "reztyp")][Required]RezeptTyp reztyp, [FromRoute (Name = "rezid")][Required]string rezid);
        /// <summary>
        /// Status�nderung eines Rezeptes
        /// </summary>
        /// <remarks>patchRezeptIdStatus</remarks>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="rezid">Die Rezept-ID.</param>
        /// <param name="status">Status value</param>
        /// <response code="200">Liefert den Status des Rezeptes f�r die ID</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpPatch]
        [Route("/v1/apotheke/{apoik}/rezept/{reztyp}/{rezid}")]
        [ValidateModelState]
        [SwaggerOperation("PatchRezeptIdStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(RezeptStatus), description: "Liefert den Status des Rezeptes f�r die ID")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found")]
        public abstract Task<IActionResult> PatchRezeptIdStatus([FromRoute (Name = "apoik")][Required]string apoik, [FromRoute (Name = "reztyp")][Required]RezeptTyp reztyp, [FromRoute (Name = "rezid")][Required]string rezid, [FromQuery (Name = "status")][Required()]string status);
    }
}
