/*
 * Webservice ArzTI API
 *
 * Kommunikation des Webservers mit den jeweiligen Rechenzentren V.2021-05-20            
 *
 * The version of the OpenAPI document: V1
 * 
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using ArzTiServer.Attributes;
using ArzTiServer.Models;
namespace ArzTiServer.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class RezeptIDListApiController : ControllerBase
    { 
        /// <summary>
        /// liefert eine Liste von Rezepten  einer Apotheke
        /// </summary>
        /// <remarks>getRezeptIdList: F�r die angegebene ApoIK werden alle Rezepte zur�ckgegeben.     Optional kann ein Rezepttyp angegeben werden und die maximale Anzahl der Datens�tze, die zur�ckgegeben werden.      Optional kann ein Zeitraum in der Form yyyy-mm angegeben werden und die maximale Anzahl der Datens�tze, die zur�ckgegeben werden.      Es werden solange neue Datens�tze zur�ckgegenben, bis keine neuen mehr vorhanden sind.</remarks>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="maxnum">maximale Anzahl der Rezepte, die zur�ckgegeben werden</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM</param>
        /// <param name="status">Status values that need to be considered for filter</param>
        /// <response code="200">Liefert eine Liste mit den gefundenen Rezepten.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v1/apotheke/{apoik}/rezept")]
        [ValidateModelState]
        [SwaggerOperation("GetRezeptIdList")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Rezept>), description: "Liefert eine Liste mit den gefundenen Rezepten.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found")]
        public abstract Task<IActionResult> GetRezeptIdList([FromRoute (Name = "apoik")][Required]string apoik, [FromQuery (Name = "reztyp")]RezeptTyp? reztyp, [FromQuery (Name = "maxnum")]int? maxnum, [FromQuery (Name = "zeitraum")]string zeitraum, [FromQuery (Name = "status")]List<string> status);
        /// <summary>
        /// Abfrage aller neuen Rezepte einer Apotheke
        /// </summary>
        /// <remarks>F�r die angegebene ApoIK werden alle Rezepte zur�ckgegeben, die noch nicht abgeholt wurden.      Optional kann ein Zeitraum in der Form yyyy-mm angegeben werden und die maximale Anzahl der Datens�tze, die zur�ckgegeben werden.      Es werden solange neue Datens�tze zur�ckgegenben, bis keine neuen mehr vorhanden sind.</remarks>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM</param>
        /// <response code="200">Liefert eine Liste der Status aller Rezepte</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v1/apotheke/{apoik}/rezept/abholung")]
        [ValidateModelState]
        [SwaggerOperation("GetRezeptIdListAbholstatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Rezept>), description: "Liefert eine Liste der Status aller Rezepte")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found")]
        public abstract Task<IActionResult> GetRezeptIdListAbholstatus([FromRoute (Name = "apoik")][Required]string apoik, [FromQuery (Name = "reztyp")]RezeptTyp? reztyp, [FromQuery (Name = "zeitraum")]string zeitraum);
        /// <summary>
        /// Ergebnisabfrage zur Vorpr�fung aller Rezepte einer Apotheke
        /// </summary>
        /// <remarks>getRezeptIdListPruefRes</remarks>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM</param>
        /// <param name="status">Status values that need to be considered for filter</param>
        /// <response code="200">Liefert eine Liste der Status aller Rezepte</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v1/apotheke/{apoik}/rezept/pruefung")]
        [ValidateModelState]
        [SwaggerOperation("GetRezeptIdListPruefRes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<RezeptPruefResult>), description: "Liefert eine Liste der Status aller Rezepte")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found")]
        public abstract Task<IActionResult> GetRezeptIdListPruefRes([FromRoute (Name = "apoik")][Required]string apoik, [FromQuery (Name = "reztyp")]RezeptTyp? reztyp, [FromQuery (Name = "zeitraum")]string zeitraum, [FromQuery (Name = "status")]List<string> status);
        /// <summary>
        /// Statusabfrage aller Rezepte einer Apotheke
        /// </summary>
        /// <remarks>getRezeptIdStatusList</remarks>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM</param>
        /// <response code="200">Liefert eine Liste der Status aller Rezepte</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v1/apotheke/{apoik}/rezept/status")]
        [ValidateModelState]
        [SwaggerOperation("GetRezeptIdStatusList")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<RezeptStatus>), description: "Liefert eine Liste der Status aller Rezepte")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found")]
        public abstract Task<IActionResult> GetRezeptIdStatusList([FromRoute (Name = "apoik")][Required]string apoik, [FromQuery (Name = "reztyp")]RezeptTyp? reztyp, [FromQuery (Name = "zeitraum")]string zeitraum);
        /// <summary>
        /// �nderung des Abholstatus einer Liste von Rezepten
        /// </summary>
        /// <remarks>patchRezeptIdListAbholstatus: �ndert Abholstatus einer Liste von Rezepten</remarks>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="rezeptId"></param>
        /// <response code="200">Returns the newly created item</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="405">Validation exception</response>
        [HttpPatch]
        [Route("/v1/apotheke/{apoik}/rezept/abholung")]
        [Consumes("application/json", "application/_*+json")]
        [ValidateModelState]
        [SwaggerOperation("PatchRezeptIdListAbholstatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Abholstatus>), description: "Returns the newly created item")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found")]
        public abstract Task<IActionResult> PatchRezeptIdListAbholstatus([FromRoute (Name = "apoik")][Required]string apoik, [FromBody]List<RezeptId> rezeptId);
        /// <summary>
        /// Status�nderung einer Liste von Rezepten
        /// </summary>
        /// <remarks>patchRezeptIdListStatus</remarks>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="rezeptStatus"></param>
        /// <response code="200">Liefert den Status einer Liste von Rezepten</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpPatch]
        [Route("/v1/apotheke/{apoik}/rezept/status")]
        [Consumes("application/json", "application/xml")]
        [ValidateModelState]
        [SwaggerOperation("PatchRezeptIdListStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<RezeptStatus>), description: "Liefert den Status einer Liste von Rezepten")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found")]
        public abstract Task<IActionResult> PatchRezeptIdListStatus([FromRoute (Name = "apoik")][Required]string apoik, [FromBody]List<RezeptStatus> rezeptStatus);
        /// <summary>
        /// pr�ft eine Liste von Rezepten
        /// </summary>
        /// <remarks>putRezeptIdListPruefung</remarks>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="rezeptId">user to add to the system</param>
        /// <response code="202">die Liste wurde akzeptiert</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpPut]
        [Route("/v1/apotheke/{apoik}/rezept/pruefung")]
        [Consumes("text/plain", "application/json", "application/xml")]
        [ValidateModelState]
        [SwaggerOperation("PutRezeptIdListPruefung")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found")]
        public abstract Task<IActionResult> PutRezeptIdListPruefung([FromRoute (Name = "apoik")][Required]string apoik, [FromBody]List<RezeptId> rezeptId);
    }
}
