/* 
 * Webservice ArzTI API
 *
 * Kommunikation des Webservers mit den jeweiligen Rechenzentren V.2021-05-20 
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IRezeptIDListApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// liefert eine Liste von Rezepten  einer Apotheke
        /// </summary>
        /// <remarks>
        /// getRezeptIdList: Für die angegebene ApoIK werden alle Rezepte zurückgegeben.     Optional kann ein Rezepttyp angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Optional kann ein Zeitraum in der Form yyyy-mm angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Es werden solange neue Datensätze zurückgegenben, bis keine neuen mehr vorhanden sind.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="maxnum">maximale Anzahl der Rezepte, die zurückgegeben werden (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <param name="status">Status values that need to be considered for filter (optional)</param>
        /// <returns>List&lt;Rezept&gt;</returns>
        List<Rezept> GetRezeptIdList (string apoik, RezeptTyp reztyp = default(RezeptTyp), int? maxnum = null, string zeitraum = null, List<string> status = null);

        /// <summary>
        /// liefert eine Liste von Rezepten  einer Apotheke
        /// </summary>
        /// <remarks>
        /// getRezeptIdList: Für die angegebene ApoIK werden alle Rezepte zurückgegeben.     Optional kann ein Rezepttyp angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Optional kann ein Zeitraum in der Form yyyy-mm angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Es werden solange neue Datensätze zurückgegenben, bis keine neuen mehr vorhanden sind.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="maxnum">maximale Anzahl der Rezepte, die zurückgegeben werden (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <param name="status">Status values that need to be considered for filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Rezept&gt;</returns>
        ApiResponse<List<Rezept>> GetRezeptIdListWithHttpInfo (string apoik, RezeptTyp reztyp = default(RezeptTyp), int? maxnum = null, string zeitraum = null, List<string> status = null);
        /// <summary>
        /// Abfrage aller neuen Rezepte einer Apotheke
        /// </summary>
        /// <remarks>
        /// Für die angegebene ApoIK werden alle Rezepte zurückgegeben, die noch nicht abgeholt wurden.      Optional kann ein Zeitraum in der Form yyyy-mm angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Es werden solange neue Datensätze zurückgegenben, bis keine neuen mehr vorhanden sind.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <returns>List&lt;Rezept&gt;</returns>
        List<Rezept> GetRezeptIdListAbholstatus (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null);

        /// <summary>
        /// Abfrage aller neuen Rezepte einer Apotheke
        /// </summary>
        /// <remarks>
        /// Für die angegebene ApoIK werden alle Rezepte zurückgegeben, die noch nicht abgeholt wurden.      Optional kann ein Zeitraum in der Form yyyy-mm angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Es werden solange neue Datensätze zurückgegenben, bis keine neuen mehr vorhanden sind.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <returns>ApiResponse of List&lt;Rezept&gt;</returns>
        ApiResponse<List<Rezept>> GetRezeptIdListAbholstatusWithHttpInfo (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null);
        /// <summary>
        /// Ergebnisabfrage zur Vorprüfung aller Rezepte einer Apotheke
        /// </summary>
        /// <remarks>
        /// getRezeptIdListPruefRes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <param name="status">Status values that need to be considered for filter (optional)</param>
        /// <returns>List&lt;RezeptPruefResult&gt;</returns>
        List<RezeptPruefResult> GetRezeptIdListPruefRes (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null, List<string> status = null);

        /// <summary>
        /// Ergebnisabfrage zur Vorprüfung aller Rezepte einer Apotheke
        /// </summary>
        /// <remarks>
        /// getRezeptIdListPruefRes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <param name="status">Status values that need to be considered for filter (optional)</param>
        /// <returns>ApiResponse of List&lt;RezeptPruefResult&gt;</returns>
        ApiResponse<List<RezeptPruefResult>> GetRezeptIdListPruefResWithHttpInfo (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null, List<string> status = null);
        /// <summary>
        /// Statusabfrage aller Rezepte einer Apotheke
        /// </summary>
        /// <remarks>
        /// getRezeptIdStatusList
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <returns>List&lt;RezeptStatus&gt;</returns>
        List<RezeptStatus> GetRezeptIdStatusList (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null);

        /// <summary>
        /// Statusabfrage aller Rezepte einer Apotheke
        /// </summary>
        /// <remarks>
        /// getRezeptIdStatusList
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <returns>ApiResponse of List&lt;RezeptStatus&gt;</returns>
        ApiResponse<List<RezeptStatus>> GetRezeptIdStatusListWithHttpInfo (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null);
        /// <summary>
        /// Änderung des Abholstatus einer Liste von Rezepten
        /// </summary>
        /// <remarks>
        /// patchRezeptIdListAbholstatus: ändert Abholstatus einer Liste von Rezepten
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <returns>List&lt;Abholstatus&gt;</returns>
        List<Abholstatus> PatchRezeptIdListAbholstatus (List<RezeptId> body, string apoik);

        /// <summary>
        /// Änderung des Abholstatus einer Liste von Rezepten
        /// </summary>
        /// <remarks>
        /// patchRezeptIdListAbholstatus: ändert Abholstatus einer Liste von Rezepten
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <returns>ApiResponse of List&lt;Abholstatus&gt;</returns>
        ApiResponse<List<Abholstatus>> PatchRezeptIdListAbholstatusWithHttpInfo (List<RezeptId> body, string apoik);
        /// <summary>
        /// Statusänderung einer Liste von Rezepten
        /// </summary>
        /// <remarks>
        /// patchRezeptIdListStatus
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;RezeptStatus&gt;</returns>
        List<RezeptStatus> PatchRezeptIdListStatus (string apoik, List<RezeptStatus> body = null);

        /// <summary>
        /// Statusänderung einer Liste von Rezepten
        /// </summary>
        /// <remarks>
        /// patchRezeptIdListStatus
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;RezeptStatus&gt;</returns>
        ApiResponse<List<RezeptStatus>> PatchRezeptIdListStatusWithHttpInfo (string apoik, List<RezeptStatus> body = null);
        /// <summary>
        /// prüft eine Liste von Rezepten
        /// </summary>
        /// <remarks>
        /// putRezeptIdListPruefung
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">user to add to the system</param>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <returns></returns>
        void PutRezeptIdListPruefung (List<RezeptId> body, string apoik);

        /// <summary>
        /// prüft eine Liste von Rezepten
        /// </summary>
        /// <remarks>
        /// putRezeptIdListPruefung
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">user to add to the system</param>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutRezeptIdListPruefungWithHttpInfo (List<RezeptId> body, string apoik);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// liefert eine Liste von Rezepten  einer Apotheke
        /// </summary>
        /// <remarks>
        /// getRezeptIdList: Für die angegebene ApoIK werden alle Rezepte zurückgegeben.     Optional kann ein Rezepttyp angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Optional kann ein Zeitraum in der Form yyyy-mm angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Es werden solange neue Datensätze zurückgegenben, bis keine neuen mehr vorhanden sind.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="maxnum">maximale Anzahl der Rezepte, die zurückgegeben werden (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <param name="status">Status values that need to be considered for filter (optional)</param>
        /// <returns>Task of List&lt;Rezept&gt;</returns>
        System.Threading.Tasks.Task<List<Rezept>> GetRezeptIdListAsync (string apoik, RezeptTyp reztyp = default(RezeptTyp), int? maxnum = null, string zeitraum = null, List<string> status = null);

        /// <summary>
        /// liefert eine Liste von Rezepten  einer Apotheke
        /// </summary>
        /// <remarks>
        /// getRezeptIdList: Für die angegebene ApoIK werden alle Rezepte zurückgegeben.     Optional kann ein Rezepttyp angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Optional kann ein Zeitraum in der Form yyyy-mm angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Es werden solange neue Datensätze zurückgegenben, bis keine neuen mehr vorhanden sind.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="maxnum">maximale Anzahl der Rezepte, die zurückgegeben werden (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <param name="status">Status values that need to be considered for filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Rezept&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Rezept>>> GetRezeptIdListAsyncWithHttpInfo (string apoik, RezeptTyp reztyp = default(RezeptTyp), int? maxnum = null, string zeitraum = null, List<string> status = null);
        /// <summary>
        /// Abfrage aller neuen Rezepte einer Apotheke
        /// </summary>
        /// <remarks>
        /// Für die angegebene ApoIK werden alle Rezepte zurückgegeben, die noch nicht abgeholt wurden.      Optional kann ein Zeitraum in der Form yyyy-mm angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Es werden solange neue Datensätze zurückgegenben, bis keine neuen mehr vorhanden sind.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <returns>Task of List&lt;Rezept&gt;</returns>
        System.Threading.Tasks.Task<List<Rezept>> GetRezeptIdListAbholstatusAsync (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null);

        /// <summary>
        /// Abfrage aller neuen Rezepte einer Apotheke
        /// </summary>
        /// <remarks>
        /// Für die angegebene ApoIK werden alle Rezepte zurückgegeben, die noch nicht abgeholt wurden.      Optional kann ein Zeitraum in der Form yyyy-mm angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Es werden solange neue Datensätze zurückgegenben, bis keine neuen mehr vorhanden sind.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Rezept&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Rezept>>> GetRezeptIdListAbholstatusAsyncWithHttpInfo (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null);
        /// <summary>
        /// Ergebnisabfrage zur Vorprüfung aller Rezepte einer Apotheke
        /// </summary>
        /// <remarks>
        /// getRezeptIdListPruefRes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <param name="status">Status values that need to be considered for filter (optional)</param>
        /// <returns>Task of List&lt;RezeptPruefResult&gt;</returns>
        System.Threading.Tasks.Task<List<RezeptPruefResult>> GetRezeptIdListPruefResAsync (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null, List<string> status = null);

        /// <summary>
        /// Ergebnisabfrage zur Vorprüfung aller Rezepte einer Apotheke
        /// </summary>
        /// <remarks>
        /// getRezeptIdListPruefRes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <param name="status">Status values that need to be considered for filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RezeptPruefResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RezeptPruefResult>>> GetRezeptIdListPruefResAsyncWithHttpInfo (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null, List<string> status = null);
        /// <summary>
        /// Statusabfrage aller Rezepte einer Apotheke
        /// </summary>
        /// <remarks>
        /// getRezeptIdStatusList
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <returns>Task of List&lt;RezeptStatus&gt;</returns>
        System.Threading.Tasks.Task<List<RezeptStatus>> GetRezeptIdStatusListAsync (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null);

        /// <summary>
        /// Statusabfrage aller Rezepte einer Apotheke
        /// </summary>
        /// <remarks>
        /// getRezeptIdStatusList
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RezeptStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RezeptStatus>>> GetRezeptIdStatusListAsyncWithHttpInfo (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null);
        /// <summary>
        /// Änderung des Abholstatus einer Liste von Rezepten
        /// </summary>
        /// <remarks>
        /// patchRezeptIdListAbholstatus: ändert Abholstatus einer Liste von Rezepten
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <returns>Task of List&lt;Abholstatus&gt;</returns>
        System.Threading.Tasks.Task<List<Abholstatus>> PatchRezeptIdListAbholstatusAsync (List<RezeptId> body, string apoik);

        /// <summary>
        /// Änderung des Abholstatus einer Liste von Rezepten
        /// </summary>
        /// <remarks>
        /// patchRezeptIdListAbholstatus: ändert Abholstatus einer Liste von Rezepten
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <returns>Task of ApiResponse (List&lt;Abholstatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Abholstatus>>> PatchRezeptIdListAbholstatusAsyncWithHttpInfo (List<RezeptId> body, string apoik);
        /// <summary>
        /// Statusänderung einer Liste von Rezepten
        /// </summary>
        /// <remarks>
        /// patchRezeptIdListStatus
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;RezeptStatus&gt;</returns>
        System.Threading.Tasks.Task<List<RezeptStatus>> PatchRezeptIdListStatusAsync (string apoik, List<RezeptStatus> body = null);

        /// <summary>
        /// Statusänderung einer Liste von Rezepten
        /// </summary>
        /// <remarks>
        /// patchRezeptIdListStatus
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RezeptStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RezeptStatus>>> PatchRezeptIdListStatusAsyncWithHttpInfo (string apoik, List<RezeptStatus> body = null);
        /// <summary>
        /// prüft eine Liste von Rezepten
        /// </summary>
        /// <remarks>
        /// putRezeptIdListPruefung
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">user to add to the system</param>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutRezeptIdListPruefungAsync (List<RezeptId> body, string apoik);

        /// <summary>
        /// prüft eine Liste von Rezepten
        /// </summary>
        /// <remarks>
        /// putRezeptIdListPruefung
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">user to add to the system</param>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutRezeptIdListPruefungAsyncWithHttpInfo (List<RezeptId> body, string apoik);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class RezeptIDListApi : IRezeptIDListApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RezeptIDListApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RezeptIDListApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RezeptIDListApi"/> class
        /// </summary>
        /// <returns></returns>
        public RezeptIDListApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RezeptIDListApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RezeptIDListApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// liefert eine Liste von Rezepten  einer Apotheke getRezeptIdList: Für die angegebene ApoIK werden alle Rezepte zurückgegeben.     Optional kann ein Rezepttyp angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Optional kann ein Zeitraum in der Form yyyy-mm angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Es werden solange neue Datensätze zurückgegenben, bis keine neuen mehr vorhanden sind.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="maxnum">maximale Anzahl der Rezepte, die zurückgegeben werden (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <param name="status">Status values that need to be considered for filter (optional)</param>
        /// <returns>List&lt;Rezept&gt;</returns>
        public List<Rezept> GetRezeptIdList (string apoik, RezeptTyp reztyp = default(RezeptTyp), int? maxnum = null, string zeitraum = null, List<string> status = null)
        {
             ApiResponse<List<Rezept>> localVarResponse = GetRezeptIdListWithHttpInfo(apoik, reztyp, maxnum, zeitraum, status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// liefert eine Liste von Rezepten  einer Apotheke getRezeptIdList: Für die angegebene ApoIK werden alle Rezepte zurückgegeben.     Optional kann ein Rezepttyp angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Optional kann ein Zeitraum in der Form yyyy-mm angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Es werden solange neue Datensätze zurückgegenben, bis keine neuen mehr vorhanden sind.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="maxnum">maximale Anzahl der Rezepte, die zurückgegeben werden (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <param name="status">Status values that need to be considered for filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Rezept&gt;</returns>
        public ApiResponse< List<Rezept> > GetRezeptIdListWithHttpInfo (string apoik, RezeptTyp reztyp = default(RezeptTyp), int? maxnum = null, string zeitraum = null, List<string> status = null)
        {
            // verify the required parameter 'apoik' is set
            if (apoik == null)
                throw new ApiException(400, "Missing required parameter 'apoik' when calling RezeptIDListApi->GetRezeptIdList");

            var localVarPath = "/apotheke/{apoik}/rezept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apoik != null) localVarPathParams.Add("apoik", this.Configuration.ApiClient.ParameterToString(apoik)); // path parameter
            if (reztyp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reztyp", reztyp)); // query parameter
            if (maxnum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxnum", maxnum)); // query parameter
            if (zeitraum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "zeitraum", zeitraum)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "status", status)); // query parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRezeptIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Rezept>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Rezept>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Rezept>)));
        }

        /// <summary>
        /// liefert eine Liste von Rezepten  einer Apotheke getRezeptIdList: Für die angegebene ApoIK werden alle Rezepte zurückgegeben.     Optional kann ein Rezepttyp angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Optional kann ein Zeitraum in der Form yyyy-mm angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Es werden solange neue Datensätze zurückgegenben, bis keine neuen mehr vorhanden sind.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="maxnum">maximale Anzahl der Rezepte, die zurückgegeben werden (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <param name="status">Status values that need to be considered for filter (optional)</param>
        /// <returns>Task of List&lt;Rezept&gt;</returns>
        public async System.Threading.Tasks.Task<List<Rezept>> GetRezeptIdListAsync (string apoik, RezeptTyp reztyp = default(RezeptTyp), int? maxnum = null, string zeitraum = null, List<string> status = null)
        {
             ApiResponse<List<Rezept>> localVarResponse = await GetRezeptIdListAsyncWithHttpInfo(apoik, reztyp, maxnum, zeitraum, status);
             return localVarResponse.Data;

        }

        /// <summary>
        /// liefert eine Liste von Rezepten  einer Apotheke getRezeptIdList: Für die angegebene ApoIK werden alle Rezepte zurückgegeben.     Optional kann ein Rezepttyp angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Optional kann ein Zeitraum in der Form yyyy-mm angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Es werden solange neue Datensätze zurückgegenben, bis keine neuen mehr vorhanden sind.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="maxnum">maximale Anzahl der Rezepte, die zurückgegeben werden (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <param name="status">Status values that need to be considered for filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Rezept&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Rezept>>> GetRezeptIdListAsyncWithHttpInfo (string apoik, RezeptTyp reztyp = default(RezeptTyp), int? maxnum = null, string zeitraum = null, List<string> status = null)
        {
            // verify the required parameter 'apoik' is set
            if (apoik == null)
                throw new ApiException(400, "Missing required parameter 'apoik' when calling RezeptIDListApi->GetRezeptIdList");

            var localVarPath = "/apotheke/{apoik}/rezept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apoik != null) localVarPathParams.Add("apoik", this.Configuration.ApiClient.ParameterToString(apoik)); // path parameter
            if (reztyp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reztyp", reztyp)); // query parameter
            if (maxnum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxnum", maxnum)); // query parameter
            if (zeitraum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "zeitraum", zeitraum)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "status", status)); // query parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRezeptIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Rezept>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Rezept>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Rezept>)));
        }

        /// <summary>
        /// Abfrage aller neuen Rezepte einer Apotheke Für die angegebene ApoIK werden alle Rezepte zurückgegeben, die noch nicht abgeholt wurden.      Optional kann ein Zeitraum in der Form yyyy-mm angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Es werden solange neue Datensätze zurückgegenben, bis keine neuen mehr vorhanden sind.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <returns>List&lt;Rezept&gt;</returns>
        public List<Rezept> GetRezeptIdListAbholstatus (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null)
        {
             ApiResponse<List<Rezept>> localVarResponse = GetRezeptIdListAbholstatusWithHttpInfo(apoik, reztyp, zeitraum);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Abfrage aller neuen Rezepte einer Apotheke Für die angegebene ApoIK werden alle Rezepte zurückgegeben, die noch nicht abgeholt wurden.      Optional kann ein Zeitraum in der Form yyyy-mm angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Es werden solange neue Datensätze zurückgegenben, bis keine neuen mehr vorhanden sind.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <returns>ApiResponse of List&lt;Rezept&gt;</returns>
        public ApiResponse< List<Rezept> > GetRezeptIdListAbholstatusWithHttpInfo (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null)
        {
            // verify the required parameter 'apoik' is set
            if (apoik == null)
                throw new ApiException(400, "Missing required parameter 'apoik' when calling RezeptIDListApi->GetRezeptIdListAbholstatus");

            var localVarPath = "/apotheke/{apoik}/rezept/abholung";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apoik != null) localVarPathParams.Add("apoik", this.Configuration.ApiClient.ParameterToString(apoik)); // path parameter
            if (reztyp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reztyp", reztyp)); // query parameter
            if (zeitraum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "zeitraum", zeitraum)); // query parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRezeptIdListAbholstatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Rezept>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Rezept>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Rezept>)));
        }

        /// <summary>
        /// Abfrage aller neuen Rezepte einer Apotheke Für die angegebene ApoIK werden alle Rezepte zurückgegeben, die noch nicht abgeholt wurden.      Optional kann ein Zeitraum in der Form yyyy-mm angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Es werden solange neue Datensätze zurückgegenben, bis keine neuen mehr vorhanden sind.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <returns>Task of List&lt;Rezept&gt;</returns>
        public async System.Threading.Tasks.Task<List<Rezept>> GetRezeptIdListAbholstatusAsync (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null)
        {
             ApiResponse<List<Rezept>> localVarResponse = await GetRezeptIdListAbholstatusAsyncWithHttpInfo(apoik, reztyp, zeitraum);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Abfrage aller neuen Rezepte einer Apotheke Für die angegebene ApoIK werden alle Rezepte zurückgegeben, die noch nicht abgeholt wurden.      Optional kann ein Zeitraum in der Form yyyy-mm angegeben werden und die maximale Anzahl der Datensätze, die zurückgegeben werden.      Es werden solange neue Datensätze zurückgegenben, bis keine neuen mehr vorhanden sind.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Rezept&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Rezept>>> GetRezeptIdListAbholstatusAsyncWithHttpInfo (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null)
        {
            // verify the required parameter 'apoik' is set
            if (apoik == null)
                throw new ApiException(400, "Missing required parameter 'apoik' when calling RezeptIDListApi->GetRezeptIdListAbholstatus");

            var localVarPath = "/apotheke/{apoik}/rezept/abholung";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apoik != null) localVarPathParams.Add("apoik", this.Configuration.ApiClient.ParameterToString(apoik)); // path parameter
            if (reztyp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reztyp", reztyp)); // query parameter
            if (zeitraum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "zeitraum", zeitraum)); // query parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRezeptIdListAbholstatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Rezept>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Rezept>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Rezept>)));
        }

        /// <summary>
        /// Ergebnisabfrage zur Vorprüfung aller Rezepte einer Apotheke getRezeptIdListPruefRes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <param name="status">Status values that need to be considered for filter (optional)</param>
        /// <returns>List&lt;RezeptPruefResult&gt;</returns>
        public List<RezeptPruefResult> GetRezeptIdListPruefRes (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null, List<string> status = null)
        {
             ApiResponse<List<RezeptPruefResult>> localVarResponse = GetRezeptIdListPruefResWithHttpInfo(apoik, reztyp, zeitraum, status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ergebnisabfrage zur Vorprüfung aller Rezepte einer Apotheke getRezeptIdListPruefRes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <param name="status">Status values that need to be considered for filter (optional)</param>
        /// <returns>ApiResponse of List&lt;RezeptPruefResult&gt;</returns>
        public ApiResponse< List<RezeptPruefResult> > GetRezeptIdListPruefResWithHttpInfo (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null, List<string> status = null)
        {
            // verify the required parameter 'apoik' is set
            if (apoik == null)
                throw new ApiException(400, "Missing required parameter 'apoik' when calling RezeptIDListApi->GetRezeptIdListPruefRes");

            var localVarPath = "/apotheke/{apoik}/rezept/pruefung";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apoik != null) localVarPathParams.Add("apoik", this.Configuration.ApiClient.ParameterToString(apoik)); // path parameter
            if (reztyp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reztyp", reztyp)); // query parameter
            if (zeitraum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "zeitraum", zeitraum)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "status", status)); // query parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRezeptIdListPruefRes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RezeptPruefResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RezeptPruefResult>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RezeptPruefResult>)));
        }

        /// <summary>
        /// Ergebnisabfrage zur Vorprüfung aller Rezepte einer Apotheke getRezeptIdListPruefRes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <param name="status">Status values that need to be considered for filter (optional)</param>
        /// <returns>Task of List&lt;RezeptPruefResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<RezeptPruefResult>> GetRezeptIdListPruefResAsync (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null, List<string> status = null)
        {
             ApiResponse<List<RezeptPruefResult>> localVarResponse = await GetRezeptIdListPruefResAsyncWithHttpInfo(apoik, reztyp, zeitraum, status);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ergebnisabfrage zur Vorprüfung aller Rezepte einer Apotheke getRezeptIdListPruefRes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <param name="status">Status values that need to be considered for filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RezeptPruefResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RezeptPruefResult>>> GetRezeptIdListPruefResAsyncWithHttpInfo (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null, List<string> status = null)
        {
            // verify the required parameter 'apoik' is set
            if (apoik == null)
                throw new ApiException(400, "Missing required parameter 'apoik' when calling RezeptIDListApi->GetRezeptIdListPruefRes");

            var localVarPath = "/apotheke/{apoik}/rezept/pruefung";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apoik != null) localVarPathParams.Add("apoik", this.Configuration.ApiClient.ParameterToString(apoik)); // path parameter
            if (reztyp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reztyp", reztyp)); // query parameter
            if (zeitraum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "zeitraum", zeitraum)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "status", status)); // query parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRezeptIdListPruefRes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RezeptPruefResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RezeptPruefResult>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RezeptPruefResult>)));
        }

        /// <summary>
        /// Statusabfrage aller Rezepte einer Apotheke getRezeptIdStatusList
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <returns>List&lt;RezeptStatus&gt;</returns>
        public List<RezeptStatus> GetRezeptIdStatusList (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null)
        {
             ApiResponse<List<RezeptStatus>> localVarResponse = GetRezeptIdStatusListWithHttpInfo(apoik, reztyp, zeitraum);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Statusabfrage aller Rezepte einer Apotheke getRezeptIdStatusList
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <returns>ApiResponse of List&lt;RezeptStatus&gt;</returns>
        public ApiResponse< List<RezeptStatus> > GetRezeptIdStatusListWithHttpInfo (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null)
        {
            // verify the required parameter 'apoik' is set
            if (apoik == null)
                throw new ApiException(400, "Missing required parameter 'apoik' when calling RezeptIDListApi->GetRezeptIdStatusList");

            var localVarPath = "/apotheke/{apoik}/rezept/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apoik != null) localVarPathParams.Add("apoik", this.Configuration.ApiClient.ParameterToString(apoik)); // path parameter
            if (reztyp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reztyp", reztyp)); // query parameter
            if (zeitraum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "zeitraum", zeitraum)); // query parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRezeptIdStatusList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RezeptStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RezeptStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RezeptStatus>)));
        }

        /// <summary>
        /// Statusabfrage aller Rezepte einer Apotheke getRezeptIdStatusList
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <returns>Task of List&lt;RezeptStatus&gt;</returns>
        public async System.Threading.Tasks.Task<List<RezeptStatus>> GetRezeptIdStatusListAsync (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null)
        {
             ApiResponse<List<RezeptStatus>> localVarResponse = await GetRezeptIdStatusListAsyncWithHttpInfo(apoik, reztyp, zeitraum);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Statusabfrage aller Rezepte einer Apotheke getRezeptIdStatusList
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">. (optional)</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RezeptStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RezeptStatus>>> GetRezeptIdStatusListAsyncWithHttpInfo (string apoik, RezeptTyp reztyp = default(RezeptTyp), string zeitraum = null)
        {
            // verify the required parameter 'apoik' is set
            if (apoik == null)
                throw new ApiException(400, "Missing required parameter 'apoik' when calling RezeptIDListApi->GetRezeptIdStatusList");

            var localVarPath = "/apotheke/{apoik}/rezept/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apoik != null) localVarPathParams.Add("apoik", this.Configuration.ApiClient.ParameterToString(apoik)); // path parameter
            if (reztyp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reztyp", reztyp)); // query parameter
            if (zeitraum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "zeitraum", zeitraum)); // query parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRezeptIdStatusList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RezeptStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RezeptStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RezeptStatus>)));
        }

        /// <summary>
        /// Änderung des Abholstatus einer Liste von Rezepten patchRezeptIdListAbholstatus: ändert Abholstatus einer Liste von Rezepten
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <returns>List&lt;Abholstatus&gt;</returns>
        public List<Abholstatus> PatchRezeptIdListAbholstatus (List<RezeptId> body, string apoik)
        {
             ApiResponse<List<Abholstatus>> localVarResponse = PatchRezeptIdListAbholstatusWithHttpInfo(body, apoik);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Änderung des Abholstatus einer Liste von Rezepten patchRezeptIdListAbholstatus: ändert Abholstatus einer Liste von Rezepten
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <returns>ApiResponse of List&lt;Abholstatus&gt;</returns>
        public ApiResponse< List<Abholstatus> > PatchRezeptIdListAbholstatusWithHttpInfo (List<RezeptId> body, string apoik)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RezeptIDListApi->PatchRezeptIdListAbholstatus");
            // verify the required parameter 'apoik' is set
            if (apoik == null)
                throw new ApiException(400, "Missing required parameter 'apoik' when calling RezeptIDListApi->PatchRezeptIdListAbholstatus");

            var localVarPath = "/apotheke/{apoik}/rezept/abholung";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apoik != null) localVarPathParams.Add("apoik", this.Configuration.ApiClient.ParameterToString(apoik)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchRezeptIdListAbholstatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Abholstatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Abholstatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Abholstatus>)));
        }

        /// <summary>
        /// Änderung des Abholstatus einer Liste von Rezepten patchRezeptIdListAbholstatus: ändert Abholstatus einer Liste von Rezepten
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <returns>Task of List&lt;Abholstatus&gt;</returns>
        public async System.Threading.Tasks.Task<List<Abholstatus>> PatchRezeptIdListAbholstatusAsync (List<RezeptId> body, string apoik)
        {
             ApiResponse<List<Abholstatus>> localVarResponse = await PatchRezeptIdListAbholstatusAsyncWithHttpInfo(body, apoik);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Änderung des Abholstatus einer Liste von Rezepten patchRezeptIdListAbholstatus: ändert Abholstatus einer Liste von Rezepten
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <returns>Task of ApiResponse (List&lt;Abholstatus&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Abholstatus>>> PatchRezeptIdListAbholstatusAsyncWithHttpInfo (List<RezeptId> body, string apoik)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RezeptIDListApi->PatchRezeptIdListAbholstatus");
            // verify the required parameter 'apoik' is set
            if (apoik == null)
                throw new ApiException(400, "Missing required parameter 'apoik' when calling RezeptIDListApi->PatchRezeptIdListAbholstatus");

            var localVarPath = "/apotheke/{apoik}/rezept/abholung";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apoik != null) localVarPathParams.Add("apoik", this.Configuration.ApiClient.ParameterToString(apoik)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchRezeptIdListAbholstatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Abholstatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Abholstatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Abholstatus>)));
        }

        /// <summary>
        /// Statusänderung einer Liste von Rezepten patchRezeptIdListStatus
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;RezeptStatus&gt;</returns>
        public List<RezeptStatus> PatchRezeptIdListStatus (string apoik, List<RezeptStatus> body = null)
        {
             ApiResponse<List<RezeptStatus>> localVarResponse = PatchRezeptIdListStatusWithHttpInfo(apoik, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Statusänderung einer Liste von Rezepten patchRezeptIdListStatus
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;RezeptStatus&gt;</returns>
        public ApiResponse< List<RezeptStatus> > PatchRezeptIdListStatusWithHttpInfo (string apoik, List<RezeptStatus> body = null)
        {
            // verify the required parameter 'apoik' is set
            if (apoik == null)
                throw new ApiException(400, "Missing required parameter 'apoik' when calling RezeptIDListApi->PatchRezeptIdListStatus");

            var localVarPath = "/apotheke/{apoik}/rezept/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apoik != null) localVarPathParams.Add("apoik", this.Configuration.ApiClient.ParameterToString(apoik)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchRezeptIdListStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RezeptStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RezeptStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RezeptStatus>)));
        }

        /// <summary>
        /// Statusänderung einer Liste von Rezepten patchRezeptIdListStatus
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;RezeptStatus&gt;</returns>
        public async System.Threading.Tasks.Task<List<RezeptStatus>> PatchRezeptIdListStatusAsync (string apoik, List<RezeptStatus> body = null)
        {
             ApiResponse<List<RezeptStatus>> localVarResponse = await PatchRezeptIdListStatusAsyncWithHttpInfo(apoik, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Statusänderung einer Liste von Rezepten patchRezeptIdListStatus
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RezeptStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RezeptStatus>>> PatchRezeptIdListStatusAsyncWithHttpInfo (string apoik, List<RezeptStatus> body = null)
        {
            // verify the required parameter 'apoik' is set
            if (apoik == null)
                throw new ApiException(400, "Missing required parameter 'apoik' when calling RezeptIDListApi->PatchRezeptIdListStatus");

            var localVarPath = "/apotheke/{apoik}/rezept/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apoik != null) localVarPathParams.Add("apoik", this.Configuration.ApiClient.ParameterToString(apoik)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchRezeptIdListStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RezeptStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RezeptStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RezeptStatus>)));
        }

        /// <summary>
        /// prüft eine Liste von Rezepten putRezeptIdListPruefung
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">user to add to the system</param>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <returns></returns>
        public void PutRezeptIdListPruefung (List<RezeptId> body, string apoik)
        {
             PutRezeptIdListPruefungWithHttpInfo(body, apoik);
        }

        /// <summary>
        /// prüft eine Liste von Rezepten putRezeptIdListPruefung
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">user to add to the system</param>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutRezeptIdListPruefungWithHttpInfo (List<RezeptId> body, string apoik)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RezeptIDListApi->PutRezeptIdListPruefung");
            // verify the required parameter 'apoik' is set
            if (apoik == null)
                throw new ApiException(400, "Missing required parameter 'apoik' when calling RezeptIDListApi->PutRezeptIdListPruefung");

            var localVarPath = "/apotheke/{apoik}/rezept/pruefung";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain", 
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apoik != null) localVarPathParams.Add("apoik", this.Configuration.ApiClient.ParameterToString(apoik)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutRezeptIdListPruefung", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// prüft eine Liste von Rezepten putRezeptIdListPruefung
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">user to add to the system</param>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutRezeptIdListPruefungAsync (List<RezeptId> body, string apoik)
        {
             await PutRezeptIdListPruefungAsyncWithHttpInfo(body, apoik);

        }

        /// <summary>
        /// prüft eine Liste von Rezepten putRezeptIdListPruefung
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">user to add to the system</param>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutRezeptIdListPruefungAsyncWithHttpInfo (List<RezeptId> body, string apoik)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RezeptIDListApi->PutRezeptIdListPruefung");
            // verify the required parameter 'apoik' is set
            if (apoik == null)
                throw new ApiException(400, "Missing required parameter 'apoik' when calling RezeptIDListApi->PutRezeptIdListPruefung");

            var localVarPath = "/apotheke/{apoik}/rezept/pruefung";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain", 
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apoik != null) localVarPathParams.Add("apoik", this.Configuration.ApiClient.ParameterToString(apoik)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutRezeptIdListPruefung", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
