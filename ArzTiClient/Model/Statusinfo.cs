/* 
 * Webservice ArzTI API
 *
 * Kommunikation des Webservers mit den jeweiligen Rechenzentren V.2021-05-20 
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Statusinfo
    /// </summary>
    [DataContract]
        public partial class Statusinfo :  IEquatable<Statusinfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Statusinfo" /> class.
        /// </summary>
        /// <param name="fcode">fcode.</param>
        /// <param name="fstatus">fstatus.</param>
        /// <param name="fkommentar">fkommentar.</param>
        /// <param name="ftcode">ftcode.</param>
        /// <param name="posnr">posnr.</param>
        /// <param name="fkurztext">fkurztext.</param>
        public Statusinfo(string fcode = default(string), string fstatus = default(string), string fkommentar = default(string), string ftcode = default(string), string posnr = default(string), string fkurztext = default(string))
        {
            this.Fcode = fcode;
            this.Fstatus = fstatus;
            this.Fkommentar = fkommentar;
            this.Ftcode = ftcode;
            this.Posnr = posnr;
            this.Fkurztext = fkurztext;
        }
        
        /// <summary>
        /// Gets or Sets Fcode
        /// </summary>
        [DataMember(Name="fcode", EmitDefaultValue=false)]
        public string Fcode { get; set; }

        /// <summary>
        /// Gets or Sets Fstatus
        /// </summary>
        [DataMember(Name="fstatus", EmitDefaultValue=false)]
        public string Fstatus { get; set; }

        /// <summary>
        /// Gets or Sets Fkommentar
        /// </summary>
        [DataMember(Name="fkommentar", EmitDefaultValue=false)]
        public string Fkommentar { get; set; }

        /// <summary>
        /// Gets or Sets Ftcode
        /// </summary>
        [DataMember(Name="ftcode", EmitDefaultValue=false)]
        public string Ftcode { get; set; }

        /// <summary>
        /// Gets or Sets Posnr
        /// </summary>
        [DataMember(Name="posnr", EmitDefaultValue=false)]
        public string Posnr { get; set; }

        /// <summary>
        /// Gets or Sets Fkurztext
        /// </summary>
        [DataMember(Name="fkurztext", EmitDefaultValue=false)]
        public string Fkurztext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Statusinfo {\n");
            sb.Append("  Fcode: ").Append(Fcode).Append("\n");
            sb.Append("  Fstatus: ").Append(Fstatus).Append("\n");
            sb.Append("  Fkommentar: ").Append(Fkommentar).Append("\n");
            sb.Append("  Ftcode: ").Append(Ftcode).Append("\n");
            sb.Append("  Posnr: ").Append(Posnr).Append("\n");
            sb.Append("  Fkurztext: ").Append(Fkurztext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Statusinfo);
        }

        /// <summary>
        /// Returns true if Statusinfo instances are equal
        /// </summary>
        /// <param name="input">Instance of Statusinfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Statusinfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Fcode == input.Fcode ||
                    (this.Fcode != null &&
                    this.Fcode.Equals(input.Fcode))
                ) && 
                (
                    this.Fstatus == input.Fstatus ||
                    (this.Fstatus != null &&
                    this.Fstatus.Equals(input.Fstatus))
                ) && 
                (
                    this.Fkommentar == input.Fkommentar ||
                    (this.Fkommentar != null &&
                    this.Fkommentar.Equals(input.Fkommentar))
                ) && 
                (
                    this.Ftcode == input.Ftcode ||
                    (this.Ftcode != null &&
                    this.Ftcode.Equals(input.Ftcode))
                ) && 
                (
                    this.Posnr == input.Posnr ||
                    (this.Posnr != null &&
                    this.Posnr.Equals(input.Posnr))
                ) && 
                (
                    this.Fkurztext == input.Fkurztext ||
                    (this.Fkurztext != null &&
                    this.Fkurztext.Equals(input.Fkurztext))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Fcode != null)
                    hashCode = hashCode * 59 + this.Fcode.GetHashCode();
                if (this.Fstatus != null)
                    hashCode = hashCode * 59 + this.Fstatus.GetHashCode();
                if (this.Fkommentar != null)
                    hashCode = hashCode * 59 + this.Fkommentar.GetHashCode();
                if (this.Ftcode != null)
                    hashCode = hashCode * 59 + this.Ftcode.GetHashCode();
                if (this.Posnr != null)
                    hashCode = hashCode * 59 + this.Posnr.GetHashCode();
                if (this.Fkurztext != null)
                    hashCode = hashCode * 59 + this.Fkurztext.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
