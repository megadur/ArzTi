/*
 * Webservice ArzTI API
 *
 * Kommunikation des Webservers mit den jeweiligen Rechenzentren V.2021-05-20            
 *
 * The version of the OpenAPI document: V1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ArzTiServer.Converters;

namespace ArzTiServer.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Statusinfo : IEquatable<Statusinfo>
    {
        /// <summary>
        /// Gets or Sets Fcode
        /// </summary>
        [DataMember(Name="fcode", EmitDefaultValue=false)]
        public string Fcode { get; set; }

        /// <summary>
        /// Gets or Sets Fstatus
        /// </summary>
        [DataMember(Name="fstatus", EmitDefaultValue=false)]
        public string Fstatus { get; set; }

        /// <summary>
        /// Gets or Sets Fkommentar
        /// </summary>
        [DataMember(Name="fkommentar", EmitDefaultValue=false)]
        public string Fkommentar { get; set; }

        /// <summary>
        /// Gets or Sets Ftcode
        /// </summary>
        [DataMember(Name="ftcode", EmitDefaultValue=false)]
        public string Ftcode { get; set; }

        /// <summary>
        /// Gets or Sets Posnr
        /// </summary>
        [DataMember(Name="posnr", EmitDefaultValue=false)]
        public string Posnr { get; set; }

        /// <summary>
        /// Gets or Sets Fkurztext
        /// </summary>
        [DataMember(Name="fkurztext", EmitDefaultValue=false)]
        public string Fkurztext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Statusinfo {\n");
            sb.Append("  Fcode: ").Append(Fcode).Append("\n");
            sb.Append("  Fstatus: ").Append(Fstatus).Append("\n");
            sb.Append("  Fkommentar: ").Append(Fkommentar).Append("\n");
            sb.Append("  Ftcode: ").Append(Ftcode).Append("\n");
            sb.Append("  Posnr: ").Append(Posnr).Append("\n");
            sb.Append("  Fkurztext: ").Append(Fkurztext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Statusinfo)obj);
        }

        /// <summary>
        /// Returns true if Statusinfo instances are equal
        /// </summary>
        /// <param name="other">Instance of Statusinfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Statusinfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Fcode == other.Fcode ||
                    Fcode != null &&
                    Fcode.Equals(other.Fcode)
                ) && 
                (
                    Fstatus == other.Fstatus ||
                    Fstatus != null &&
                    Fstatus.Equals(other.Fstatus)
                ) && 
                (
                    Fkommentar == other.Fkommentar ||
                    Fkommentar != null &&
                    Fkommentar.Equals(other.Fkommentar)
                ) && 
                (
                    Ftcode == other.Ftcode ||
                    Ftcode != null &&
                    Ftcode.Equals(other.Ftcode)
                ) && 
                (
                    Posnr == other.Posnr ||
                    Posnr != null &&
                    Posnr.Equals(other.Posnr)
                ) && 
                (
                    Fkurztext == other.Fkurztext ||
                    Fkurztext != null &&
                    Fkurztext.Equals(other.Fkurztext)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Fcode != null)
                    hashCode = hashCode * 59 + Fcode.GetHashCode();
                    if (Fstatus != null)
                    hashCode = hashCode * 59 + Fstatus.GetHashCode();
                    if (Fkommentar != null)
                    hashCode = hashCode * 59 + Fkommentar.GetHashCode();
                    if (Ftcode != null)
                    hashCode = hashCode * 59 + Ftcode.GetHashCode();
                    if (Posnr != null)
                    hashCode = hashCode * 59 + Posnr.GetHashCode();
                    if (Fkurztext != null)
                    hashCode = hashCode * 59 + Fkurztext.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Statusinfo left, Statusinfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Statusinfo left, Statusinfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
